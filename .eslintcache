[{"C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\index.js":"1","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\App.js":"2","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\reportWebVitals.js":"3","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\courierLogin.js":"4","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\courierlogin.js":"5","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\Courierlogin.js":"6","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\UserLogin.js":"7","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\InputNewPwd.js":"8","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\store\\reducers\\rootReducer.js":"9","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\config\\fbConfig.js":"10","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\store\\reducers\\courierReducer.js":"11","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\store\\actions\\courierAction.js":"12","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\Home.js":"13","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\Items.js":"14","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\NavigationHeader.js":"15","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\RidersMap.js":"16","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\OfficeEmployees.js":"17","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\DispatchRiders.js":"18","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\UserProfile.js":"19","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\AddOfficeEmployee.js":"20","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\store\\reducers\\officeEmployeeReducer.js":"21","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\store\\actions\\officeEmployeeAction.js":"22","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\AddDispatchRider.js":"23","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\store\\reducers\\dispatchRiderReducer.js":"24","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\CustomsStyles.js":"25","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\store\\actions\\dispatchRiderAction.js":"26","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\AddItem.js":"27","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\store\\reducers\\itemReducer.js":"28","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\store\\actions\\itemAction.js":"29","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\AddItemToPrint.js":"30","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\ItemPrint.js":"31","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\AssignRiderInItem.js":"32","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\TableColumns.js":"33","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\SelectAssignRider.js":"34","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\EntryItems.js":"35","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\AllItems.js":"36","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\DeliveredItems.js":"37","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\ReturnedItems.js":"38","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\OfficeEmpInfo.js":"39","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\DispatchRiderInfo.js":"40","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\UpdateRiderInfo.js":"41","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\RiderDeliveryHistory.js":"42","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\RiderPerformance.js":"43","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\CourierName.js":"44","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\TotalUnassignedItemBranch.js":"45","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\TotalBranchItem.js":"46","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\TotalBranchDispatchRider.js":"47","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\TotalBranchOfficeEmployees.js":"48","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\SplashScreen.js":"49","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\AttemptContainer.js":"50"},{"size":2201,"mtime":1614725973896,"results":"51","hashOfConfig":"52"},{"size":3171,"mtime":1615558570292,"results":"53","hashOfConfig":"52"},{"size":362,"mtime":499162500000,"results":"54","hashOfConfig":"52"},{"size":694,"mtime":1612395941090,"results":"55","hashOfConfig":"52"},{"size":694,"mtime":1612395941090,"results":"56","hashOfConfig":"52"},{"size":2027,"mtime":1613062895276,"results":"57","hashOfConfig":"52"},{"size":2636,"mtime":1613176296662,"results":"58","hashOfConfig":"52"},{"size":1597,"mtime":1613180094105,"results":"59","hashOfConfig":"52"},{"size":658,"mtime":1613956956265,"results":"60","hashOfConfig":"52"},{"size":644,"mtime":1613875849733,"results":"61","hashOfConfig":"52"},{"size":2266,"mtime":1615557411109,"results":"62","hashOfConfig":"52"},{"size":5307,"mtime":1615557414636,"results":"63","hashOfConfig":"52"},{"size":2065,"mtime":1616414138538,"results":"64","hashOfConfig":"52"},{"size":3098,"mtime":1616216317093,"results":"65","hashOfConfig":"52"},{"size":3394,"mtime":1615560085582,"results":"66","hashOfConfig":"52"},{"size":2613,"mtime":1616587109738,"results":"67","hashOfConfig":"52"},{"size":5441,"mtime":1615182268926,"results":"68","hashOfConfig":"52"},{"size":6404,"mtime":1616215983347,"results":"69","hashOfConfig":"52"},{"size":6453,"mtime":1615365189434,"results":"70","hashOfConfig":"52"},{"size":9881,"mtime":1615205482691,"results":"71","hashOfConfig":"52"},{"size":1589,"mtime":1615367098860,"results":"72","hashOfConfig":"52"},{"size":2925,"mtime":1615367098860,"results":"73","hashOfConfig":"52"},{"size":17750,"mtime":1615285743415,"results":"74","hashOfConfig":"52"},{"size":1500,"mtime":1615292037920,"results":"75","hashOfConfig":"52"},{"size":2287,"mtime":1615266256805,"results":"76","hashOfConfig":"52"},{"size":2773,"mtime":1615291386485,"results":"77","hashOfConfig":"52"},{"size":14434,"mtime":1615357412879,"results":"78","hashOfConfig":"52"},{"size":1721,"mtime":1616585363198,"results":"79","hashOfConfig":"52"},{"size":3981,"mtime":1616586307843,"results":"80","hashOfConfig":"52"},{"size":3426,"mtime":1614490628680,"results":"81","hashOfConfig":"52"},{"size":1915,"mtime":1614286119418,"results":"82","hashOfConfig":"52"},{"size":7049,"mtime":1615101124338,"results":"83","hashOfConfig":"52"},{"size":6005,"mtime":1617628946551,"results":"84","hashOfConfig":"52"},{"size":10628,"mtime":1616236973471,"results":"85","hashOfConfig":"52"},{"size":8762,"mtime":1616303409432,"results":"86","hashOfConfig":"52"},{"size":13353,"mtime":1616303692609,"results":"87","hashOfConfig":"52"},{"size":11919,"mtime":1617622728073,"results":"88","hashOfConfig":"52"},{"size":11275,"mtime":1616323337552,"results":"89","hashOfConfig":"52"},{"size":11543,"mtime":1615277272415,"results":"90","hashOfConfig":"52"},{"size":9305,"mtime":1615425269985,"results":"91","hashOfConfig":"52"},{"size":16680,"mtime":1615292808194,"results":"92","hashOfConfig":"52"},{"size":6452,"mtime":1617628691080,"results":"93","hashOfConfig":"52"},{"size":4724,"mtime":1617690537298,"results":"94","hashOfConfig":"52"},{"size":1006,"mtime":1616492292133,"results":"95","hashOfConfig":"52"},{"size":1594,"mtime":1616492213734,"results":"96","hashOfConfig":"52"},{"size":1437,"mtime":1616492213734,"results":"97","hashOfConfig":"52"},{"size":1506,"mtime":1616492213733,"results":"98","hashOfConfig":"52"},{"size":1522,"mtime":1616492213724,"results":"99","hashOfConfig":"52"},{"size":1971,"mtime":1616240270932,"results":"100","hashOfConfig":"52"},{"size":7898,"mtime":1616590784687,"results":"101","hashOfConfig":"52"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},"1wwc3yu",{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"104"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"104"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"104"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"104"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"104"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"104"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"104"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"104"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"104"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"104"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"104"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"104"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"104"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"202","messages":"203","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"104"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"104"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"104"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"104"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"104"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"104"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"104"},"C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\index.js",[],["223","224"],"C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\App.js",[],"C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\reportWebVitals.js",[],"C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\courierLogin.js",[],"C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\courierlogin.js",[],"C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\Courierlogin.js",[],"C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\UserLogin.js",[],"C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\InputNewPwd.js",[],"C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\store\\reducers\\rootReducer.js",[],"C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\config\\fbConfig.js",[],"C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\store\\reducers\\courierReducer.js",[],"C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\store\\actions\\courierAction.js",[],"C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\Home.js",[],"C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\Items.js",[],"C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\NavigationHeader.js",[],"C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\RidersMap.js",["225"],"import React, {useState, useEffect} from 'react'\r\nimport fire from '../config/fbConfig' \r\nimport {MapContainer, TileLayer, Marker, Popup} from 'react-leaflet'\r\nimport { Icon } from 'leaflet';\r\nimport { connect } from 'react-redux';\r\n\r\nexport const icon = new Icon({\r\n    iconUrl: '/images/sfhelmet.png',\r\n    iconSize: [80, 50]\r\n  });\r\n\r\n\r\nfunction RidersMap(props) {\r\n    const {courierID} = props\r\n    const [riders , setRiders] = useState([]);\r\n    const [loading , setLoading] = useState(false);\r\n    //const [ridersdata, setRidersdata] = useState();\r\n    \r\n    const ref = fire.firestore().collection(\"DispatchRiders_Position\").where(\"courier_id\", \"==\", courierID)\r\n    function getRiderLocation(){\r\n       setLoading(true); \r\n        ref.onSnapshot((querySnapshot) => {  \r\n                var riderdata= [];   \r\n                     \r\n                querySnapshot.forEach((doc) => {  \r\n                    riderdata.push(doc.data());                                              \r\n                });\r\n               \r\n                setRiders(riderdata);\r\n                setLoading(false);\r\n            });                 \r\n    }\r\n\r\n    useEffect(() => {\r\n        getRiderLocation();\r\n    }, [])\r\n\r\n    if(loading){\r\n        return <p>loading.....</p>\r\n    }\r\n    \r\n\r\n    return (\r\n        <MapContainer center={[10.3321, 123.9357]} zoom={12}>\r\n            <TileLayer\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n            />  \r\n            {riders.map(rider => (\r\n                <Marker\r\n                    key={rider.rider_id}\r\n                    position={[\r\n                        rider.latitude,\r\n                        rider.longitude\r\n                    ]}\r\n                    icon={icon}\r\n                >\r\n                    <Popup position={[ rider.latitude, rider.longitude]} >\r\n                        <div>\r\n                            <p>Name: {rider.rider_name }\r\n                                <br/>\r\n                                Phone: {rider.rider_contactNumber}\r\n                                <br/>\r\n                                Vehicle Type: {rider.vehicle_type}\r\n                            </p>\r\n                        </div>\r\n                    </Popup>\r\n                    \r\n                 </Marker>\r\n            ))}\r\n\r\n        </MapContainer>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        courierID: state.courier.courierId,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(RidersMap)\r\n\r\n","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\OfficeEmployees.js",["226"],"import React, {useState, useEffect, useMemo} from 'react'\r\nimport { useHistory } from 'react-router';\r\nimport { connect } from 'react-redux';\r\n\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\n\r\nimport fire from '../config/fbConfig' \r\nimport { OfficeEmployeeColumn } from './TableColumns';\r\nimport AddOfficeEmployee from './AddOfficeEmployee'\r\nimport { getSelectedOfficeEmp } from '../store/actions/officeEmployeeAction'\r\n\r\n\r\nfunction OfficeEmployees(props) {\r\n    const {courierID} = props;\r\n    const history = useHistory()\r\n    const [show, setShow] = useState(false);\r\n    const closeModalHandler = () => setShow(false);\r\n    const [officeEmp, setOfficeEMp] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [category, setCategory] = useState('');\r\n    const [filterItems, setFilterItems] = useState([]);\r\n    const [searchInput, setSearchInput] = useState('');\r\n\r\n    const ref = fire.firestore().collection(\"Office_Employees\").where(\"courier_id\", \"==\", courierID);\r\n\r\n    function getOfficeEmp(){\r\n        setLoading(true);\r\n        ref.get().then((querySnapshot) => {\r\n            var Empsdata = [];\r\n            querySnapshot.forEach((doc) => {\r\n                var empsObj = {\r\n                    id: doc.data().id,\r\n                    email: doc.data().email,\r\n                    fname: doc.data().fname,\r\n                    mname: doc.data().mname,\r\n                    lname: doc.data().lname,\r\n                    gender: doc.data().gender,\r\n                    address: doc.data().address,\r\n                    branch: doc.data().branch,\r\n                    contactNumber: doc.data().contactNumber,\r\n                    jobtitle: doc.data().jobtitle,\r\n                    birthdate: doc.data().birthdate.toDate(),\r\n                    encodedBY: doc.data().encodedBY,\r\n                    status: doc.data().status\r\n                }\r\n                Empsdata.push(empsObj);\r\n            });\r\n            setOfficeEMp(Empsdata)\r\n            setLoading(false)\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        getOfficeEmp();\r\n    }, [])\r\n\r\n    const columns = useMemo(() => OfficeEmployeeColumn, []);\r\n    const rowEvents = {\r\n        onDoubleClick: (e, row) => {\r\n           //console.log(row);   \r\n           props.getSelectedOfficeEmp(row);\r\n            history.push('/officeEmpInfo');\r\n        }\r\n    }\r\n    const selectRow = {\r\n        mode: \"radio\",\r\n        clickToSelect: true,\r\n        bgColor: \"#00BFFF\",\r\n      };\r\n\r\n      const onhandleChange = (e) => {\r\n        setSearchInput(e.target.value)\r\n        let newArray = officeEmp.filter((singleEmp) => {\r\n            if(category === \"Branch\"){\r\n                let searchValue = singleEmp.branch.toLowerCase();\r\n                return searchValue.indexOf(e.target.value) !==-1;\r\n            } else if(category === \"Email\"){\r\n                let searchValue = singleEmp.email.toLowerCase();\r\n                return searchValue.indexOf(e.target.value) !==-1;\r\n            }     \r\n            else if(category === \"Last Name\"){\r\n                let searchValue = singleEmp.lname.toLowerCase();\r\n                return searchValue.indexOf(e.target.value) !==-1;\r\n            }\r\n            return singleEmp;   \r\n        });\r\n        setFilterItems(newArray);\r\n    }\r\n\r\n    if(loading){\r\n        return <p>loading.....</p>\r\n    }\r\n\r\n    return (\r\n        <div className = \"container-fluid empCntr\">\r\n            <div className = \"empfirstrow\">\r\n                { show ? <div onClick={closeModalHandler} className=\"back-drop\"></div> : null }\r\n                <button onClick={() => setShow(true)} className=\"btn-openModal btn-primary\">Add Employee</button>\r\n                <AddOfficeEmployee show={show} close={closeModalHandler} />\r\n                \r\n                <div className = \"d-flex justify-content-center searchOfEmp\">\r\n                    <input value = {searchInput} onChange = {onhandleChange} type = \"text\" placeholder =\"Seacrh for....\" className= \"searchOfAssignRiderItem\"></input>\r\n                    \r\n                   \r\n                    <select  value = {category}  onChange = {(e) => setCategory(e.target.value)}> \r\n                        <option value=\"\" disabled selected hidden>Choose Category...</option>\r\n                        <option value = \"Branch\">Branch</option>\r\n                        <option value = \"Email\">Email</option>\r\n                        <option value = \"Last Name\">Last Name</option>\r\n                    </select>\r\n                </div>  \r\n            </div>\r\n            <div className = \"ARtable\">\r\n                <BootstrapTable\r\n                    striped \r\n                    keyField = \"email\"\r\n                    data = {!searchInput? officeEmp : filterItems}\r\n                    columns = {columns}\r\n                    pagination = {paginationFactory()}\r\n                    rowEvents = {rowEvents}\r\n                    selectRow = {selectRow}\r\n                />  \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    // console.log(state)\r\n    return{\r\n        courierID: state.courier.courierId,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>{\r\n    return {\r\n        getSelectedOfficeEmp: (officeEmp) => dispatch(getSelectedOfficeEmp(officeEmp)),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps) (OfficeEmployees)\r\n","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\DispatchRiders.js",["227"],"import React, { useState , useEffect, useMemo } from 'react'\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { connect } from 'react-redux';\r\n\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\nimport { toast } from 'react-toastify'\r\nimport 'react-toastify/dist/ReactToastify.css'\r\nimport fire from '../config/fbConfig' \r\nimport { OfficeEmployeeColumn } from './TableColumns';\r\nimport { getSelectedRiderEmp } from '../store/actions/dispatchRiderAction'\r\n\r\ntoast.configure();\r\nconst DispatchRiders = (props) => {\r\n    const{courierID} = props;\r\n    const history  = useHistory();\r\n    const [riderEmp, setRiderEmp] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [category, setCategory] = useState('');\r\n    const [filterItems, setFilterItems] = useState([]);\r\n    const [searchInput, setSearchInput] = useState('');\r\n    const [riders_limit, setRidersLimit] = useState(false);\r\n    \r\n    const ref = fire.firestore().collection(\"Dispatch Riders\").where(\"courier_id\", \"==\", courierID);\r\n\r\n    function getRiderEmp(){\r\n        setLoading(true);\r\n        ref.get().then((querySnapshot) => {\r\n            var ridersdata = [];\r\n            var totalRiderInputted = 0;\r\n            querySnapshot.forEach((doc) => {\r\n                var riderObj = {\r\n                    id: doc.data().id,\r\n                    email: doc.data().email,\r\n                    fname: doc.data().fname,\r\n                    mname: doc.data().mname,\r\n                    lname: doc.data().lname,\r\n                    gender: doc.data().gender,\r\n                    address: doc.data().address,\r\n                    branch: doc.data().branch,\r\n                    contactNumber: doc.data().contactNumber,\r\n                    emerg_number: doc.data().emerg_number,\r\n                    birthdate: doc.data().birthdate.toDate(),\r\n                    encodedBY: doc.data().encodedBY,\r\n                    status: doc.data().status,\r\n                    vehicle_type: doc.data().vehicle_type,\r\n                    designateBarangay: doc.data().designateBarangay,\r\n                    actualAssessment: doc.data().actualAssessment,\r\n                    license: doc.data().license,\r\n                    oR: doc.data().oR,\r\n                    cR: doc.data().cR,\r\n                    writtenExam: doc.data().writtenExam\r\n                }\r\n                ridersdata.push(riderObj);\r\n                totalRiderInputted += 1;\r\n            });\r\n\r\n            var docRef = fire.firestore().collection(\"Couriers_Company\").doc(courierID);\r\n            docRef.get().then((doc) => {\r\n                if (doc.exists) {\r\n                    //console.log(\"Document data:\", doc.data());\r\n                    //courRidersLimit = parseInt(doc.data().ridersMaxLimit);\r\n                    if(totalRiderInputted === parseInt(doc.data().ridersMaxLimit)){\r\n                        setRidersLimit(true);\r\n                    }\r\n                } \r\n            });           \r\n            setRiderEmp(ridersdata)\r\n            setLoading(false)\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        getRiderEmp();\r\n    }, [])\r\n\r\n    const columns = useMemo(() => OfficeEmployeeColumn, []);\r\n    const rowEvents = {\r\n        onDoubleClick: (e, row) => {\r\n           //console.log(row);   \r\n           props.getSelectedRiderEmp(row);\r\n           history.push('/dispatchRiderInfo');\r\n        }\r\n    }\r\n    const selectRow = {\r\n        mode: \"radio\",\r\n        clickToSelect: true,\r\n        bgColor: \"#00BFFF\",\r\n      };\r\n\r\n    const onhandleChange = (e) => {\r\n        setSearchInput(e.target.value)\r\n        let newArray = riderEmp.filter((singleEmp) => {\r\n            if(category === \"Branch\"){\r\n                let searchValue = singleEmp.branch.toLowerCase();\r\n                return searchValue.indexOf(e.target.value) !==-1;\r\n            } else if(category === \"Email\"){\r\n                let searchValue = singleEmp.email.toLowerCase();\r\n                return searchValue.indexOf(e.target.value) !==-1;\r\n            }     \r\n            else if(category === \"Last Name\"){\r\n                let searchValue = singleEmp.lname.toLowerCase();\r\n                return searchValue.indexOf(e.target.value) !==-1;\r\n            }\r\n            return singleEmp;   \r\n        });\r\n        setFilterItems(newArray);\r\n    }\r\n\r\n    if(loading){\r\n        return <p>loading.....</p>\r\n    }\r\n\r\n    return (\r\n        <div className = \"container-fluid empCntr\">\r\n            <div className = \"empfirstrow\">\r\n                <button className=\"btn-openModal btn-primary\" onClick = {() => { riders_limit ? toast.warning('You exceed in the maximum limit of riders..Please upgrade your package Plan') : history.push('/addDispatchRiders')}}>Add Dispatch Rider</button>\r\n                \r\n                <div className = \"d-flex justify-content-center searchOfEmp\">\r\n                    <input  value = {searchInput} onChange = {onhandleChange} type = \"text\" placeholder =\"Seacrh for....\" className= \"searchOfAssignRiderItem\"></input>\r\n                   \r\n                    <select value = {category}  onChange = {(e) => setCategory(e.target.value)} >    \r\n                        <option value=\"\" disabled selected hidden>Choose Category...</option>\r\n                        <option value = \"Branch\">Branch</option>\r\n                        <option value = \"Email\">Email</option>\r\n                        <option value = \"Last Name\">Last Name</option>\r\n                    </select>\r\n                </div>  \r\n            </div>\r\n            <div className = \"ARtable\">\r\n                <BootstrapTable\r\n                    striped \r\n                    keyField = \"email\"\r\n                    data = {!searchInput? riderEmp : filterItems}\r\n                    columns = {columns}\r\n                    pagination = {paginationFactory()}\r\n                    rowEvents = {rowEvents}\r\n                    selectRow = {selectRow}\r\n                />  \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n     console.log(state)\r\n    return{\r\n        courierID: state.courier.courierId,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>{\r\n    return {\r\n        getSelectedRiderEmp: (riderEmp) => dispatch(getSelectedRiderEmp(riderEmp)),\r\n    }\r\n}\r\n\r\nexport default connect( mapStateToProps, mapDispatchToProps) (DispatchRiders) \r\n","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\UserProfile.js",["228"],"import moment from 'moment'\r\nimport React, {useState, useEffect} from 'react'\r\nimport { connect } from 'react-redux'\r\nimport firebase from '../config/fbConfig'\r\nimport {calculate_age} from './CustomsStyles'\r\nimport {updateNewEmail} from '../store/actions/officeEmployeeAction'\r\n\r\nconst UserProfile = (props) => {\r\n    const {id} = props;\r\n    const [loading, setLoading] = useState(false);\r\n    const [userprofile, setUserProfile] = useState({});\r\n    const [changeEmail, setChangeEmail] = useState(false);\r\n    const [updateEmail, setUpdateEmail] = useState('');\r\n\r\n    var docRef = firebase.firestore().collection(\"Office_Employees\").doc(id);\r\n\r\n    function getUserProfile(){\r\n        setLoading(true);\r\n        docRef.get().then((doc) => {\r\n            if (doc.exists) {\r\n                setUserProfile({\r\n                    id: doc.data().id,\r\n                    email: doc.data().email,\r\n                    fname: doc.data().fname,\r\n                    mname: doc.data().mname,\r\n                    lname: doc.data().lname,\r\n                    gender: doc.data().gender,\r\n                    address: doc.data().address,\r\n                    branch: doc.data().branch,\r\n                    contactNumber: doc.data().contactNumber,\r\n                    jobtitle: doc.data().jobtitle,\r\n                    birthdate: doc.data().birthdate.toDate(),\r\n                    encodedBY: doc.data().encodedBY,\r\n                    status: doc.data().status\r\n                });\r\n                setLoading(false);\r\n            } else {\r\n                console.log(\"No such document!\");\r\n            }\r\n        }).catch((error) => {\r\n            console.log(\"Error getting document:\", error);\r\n        }); \r\n    }\r\n\r\n    useEffect(() => {\r\n        getUserProfile();\r\n    }, [])\r\n\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n        props.updateNewEmail(updateEmail);\r\n        setChangeEmail(!changeEmail);\r\n        setUpdateEmail('');\r\n    }\r\n\r\n    var birthdateString = moment(userprofile.birthdate).format('LL').toString();\r\n\r\n    if(loading){\r\n        return <p>Loading....</p>\r\n    }\r\n\r\n\r\n    return (\r\n        <div className = \"container empCntr\">\r\n            <div className = \"d-flex justify-content-center addDR-header\">\r\n                <h2>Profile Information</h2>\r\n            </div>\r\n            <div className = \"row\">\r\n                <div className = \"col\">\r\n                    <div className = \"row\">\r\n                        <div className = \"col\">\r\n                            <h5>Email: </h5>\r\n                            <h6>{userprofile.email}</h6>\r\n                        </div>\r\n                        <div class=\"w-100\"></div>\r\n                        <div className = \"col\">\r\n                            <h5>Name: </h5>\r\n                            <h6>{userprofile.fname} {userprofile.mname} {userprofile.lname}</h6>\r\n                        </div>\r\n                        <div class=\"w-100\"></div>\r\n                        <div className = \"col\">\r\n                            <h5>Age: </h5>\r\n                            <h6>{calculate_age(userprofile.birthdate)} yrs. old</h6>\r\n                        </div>\r\n                        <div class=\"w-100\"></div>\r\n                        <div className = \"col\">\r\n                            <h5>Address: </h5>\r\n                            <h6>{userprofile.address}</h6>\r\n                        </div>\r\n                        <div class=\"w-100\"></div>\r\n                        <div className = \"col\">\r\n                            <h5>Contact Number: </h5>\r\n                            <h6>{userprofile.contactNumber}</h6>\r\n                        </div>\r\n                    </div>\r\n                </div>   \r\n                <div className = \"col\">\r\n                <div className = \"row\">\r\n                        <div className = \"col\">\r\n                            <h5>Gender: </h5>\r\n                            <h6>{userprofile.gender}</h6>\r\n                        </div>\r\n                        <div class=\"w-100\"></div>\r\n                        <div className = \"col\">\r\n                            <h5>Birth Date: </h5>\r\n                            <h6>{birthdateString}</h6>\r\n                        </div>\r\n                        <div class=\"w-100\"></div>\r\n                        <div className = \"col\">\r\n                            <h5>Job Title: </h5>\r\n                            <h6>{userprofile.jobtitle}</h6>\r\n                        </div>\r\n                        <div class=\"w-100\"></div>\r\n                        <div className = \"col\">\r\n                            <h5>Branch: </h5>\r\n                            <h6>{userprofile.branch}</h6>\r\n                        </div>\r\n                        <div class=\"w-100\"></div>\r\n                        <div className = \"col\">\r\n                            <h5>Status: </h5>\r\n                            <h6>{userprofile.status}</h6>\r\n                        </div>\r\n                    </div>\r\n                </div>              \r\n            </div>\r\n            <div><label className = \"label-area\" onClick = {()=> setChangeEmail(!changeEmail)}>Change Email</label></div>\r\n            {changeEmail ? (\r\n                <div className = \"addDR-inputs-name\">\r\n                    <div className = \"row\">\r\n                        <div className = \"col\">\r\n                            <input \r\n                                placeholder=\"Enter Email\" \r\n                                name=\"newEmail\"                             \r\n                                required \r\n                                value = {updateEmail}\r\n                                onChange = {(e)=>setUpdateEmail(e.target.value)}  \r\n                            />\r\n                        </div>\r\n                        <div class=\"w-100\"></div>\r\n                        <div className = \"col\">\r\n                            <button type=\"button\" className = \"btn btn-primary btn-sm\" onClick = {handleSubmit}>Update Email</button>\r\n                        </div>\r\n                    </div>\r\n                </div>): null}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    //console.log(state); \r\n    return {\r\n        id: state.firebase.auth.uid\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>{\r\n    return {\r\n        updateNewEmail: (updateEmail) => dispatch(updateNewEmail(updateEmail)),\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps) (UserProfile)\r\n","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\AddOfficeEmployee.js",["229"],"import React, { useState, useEffect } from 'react'\r\nimport {addOfficeEmployee} from '../store/actions/officeEmployeeAction'\r\nimport { activeTextSwitch, inactiveTextSwitch } from './CustomsStyles';\r\n\r\n//import '../styles/AddOfficeEmployee.scss'\r\n\r\nimport DatePicker from 'react-datepicker'\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\nimport Select from 'react-select'\r\nimport Switch from 'react-switch'\r\nimport { connect } from 'react-redux'\r\n\r\n\r\nconst AddOfficeEmployee = (props) => {\r\n    const {show, close, branches, courierID, addOffice_Emp_Error, auth} = props\r\n    const [checked, setChecked] = useState(false)//for status\r\n    let displayName = auth.displayName;\r\n    let encodedBY = displayName.split(\"@\");\r\n\r\n\r\n    const [officeEmployeeSignup, setOfficeEmployeeSignup] = useState({\r\n        email : '',\r\n        fname : '',\r\n        mname :'',\r\n        lname :'',\r\n        address: '',\r\n        contactNumber: '',\r\n        birthdate: null,\r\n        gender: 'Male',\r\n        branch: '',\r\n        jobtitle: 'Office Clerk',\r\n        status: 'inactive',\r\n        courier_id: courierID,\r\n        encodedBY: encodedBY[1],\r\n    });  \r\n\r\n    useEffect(() => {\r\n        checked ? setOfficeEmployeeSignup({...officeEmployeeSignup, status: 'active'}) : setOfficeEmployeeSignup({...officeEmployeeSignup, status: 'inactive'});\r\n        // eslint-disable-next-line\r\n    }, [checked]);\r\n\r\n    // useEffect(() => {\r\n    //     if (!addOffice_Emp_Error){\r\n    //         setOfficeEmployeeSignup({\r\n    //             email : '',\r\n    //             fname : '',\r\n    //             mname :'',\r\n    //             lname :'',\r\n    //             address: '',\r\n    //             contactNumber: '',\r\n    //             birthdate: null,\r\n    //             gender: 'Male',\r\n    //             branch: '',\r\n    //             jobtitle: 'Office Clerk',\r\n    //             status: 'inactive',\r\n    //             courier_id: courierID,\r\n    //             encodedBY: encodedBY[1],\r\n    //         });\r\n    //         setChecked(false);\r\n    //     } // eslint-disable-next-line\r\n    // }, [addOffice_Emp_Error])\r\n\r\n    const handleOnChange = (e) =>{\r\n        setOfficeEmployeeSignup({...officeEmployeeSignup, [e.target.name]: e.target.value})\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        console.log(officeEmployeeSignup);\r\n        props.addOfficeEmployee(officeEmployeeSignup)   \r\n        \r\n        \r\n        setOfficeEmployeeSignup({\r\n            email : '',\r\n            fname : '',\r\n            mname :'',\r\n            lname :'',\r\n            address: '',\r\n            contactNumber: '',\r\n            birthdate: null,\r\n            gender: 'Male',\r\n            branch: '',\r\n            jobtitle: 'Office Clerk',\r\n            status: 'inactive',\r\n            courier_id: courierID,\r\n            encodedBY: encodedBY[1],\r\n        });\r\n        setChecked(false);\r\n    }\r\n   \r\n    const options = branches && Object.keys(branches).map(function (i) {\r\n        return {\r\n            value: branches[i].branch_name,\r\n            label: branches[i].branch_name\r\n        }\r\n      });\r\n     \r\n    return (\r\n        <div className=\"modal-wrapper\"\r\n            style={{\r\n                transform: show ? 'translateY(0vh)' : 'translateY(-150vh)',\r\n                opacity: show ? '1' : '0'\r\n            }}\r\n        >\r\n            <div className=\"modal-header\">\r\n                <h2>Add Office Employee</h2>\r\n                <span onClick={close} className=\"close-modal-btn\"> x </span>\r\n            </div>\r\n\r\n            <div className = \"modal-content\">\r\n                <form className = \"add-employee-form\" onSubmit ={handleSubmit}>\r\n                    <div className = \"employee-email-container\">\r\n                        <label>Email</label>\r\n                        <input type=\"email\"\r\n                            placeholder=\"Enter Email\" \r\n                            name=\"email\"\r\n                            value = {officeEmployeeSignup.email}\r\n                            required\r\n                            onChange = {handleOnChange} \r\n                        />\r\n                        \r\n                        <label>First Name</label>\r\n                        <input type=\"text\"\r\n                            placeholder=\"Enter First Name\" \r\n                            name=\"fname\"\r\n                            value = {officeEmployeeSignup.fname}\r\n                            required\r\n                            onChange = {handleOnChange} \r\n                        />\r\n\r\n                        <label>Middle Name</label>\r\n                        <input type=\"text\"\r\n                            placeholder=\"Enter Middle Name\" \r\n                            name=\"mname\"\r\n                            value = {officeEmployeeSignup.mname}\r\n                            required\r\n                            onChange = {handleOnChange} \r\n                        />\r\n\r\n                        <label>Last Name</label>\r\n                        <input type=\"text\"\r\n                            placeholder=\"Enter Last Name\" \r\n                            name=\"lname\"\r\n                            value = {officeEmployeeSignup.lname}\r\n                            required\r\n                            onChange = {handleOnChange} \r\n                        />\r\n\r\n                        <label>Address</label>\r\n                        <input type=\"text\"\r\n                            placeholder=\"Enter Address\" \r\n                            name=\"address\"\r\n                            value = {officeEmployeeSignup.address}\r\n                            required\r\n                            onChange = {handleOnChange} \r\n                        />\r\n\r\n                        \r\n                    </div>\r\n                    <div className = \"employee-contactNumber-container\">\r\n                        <label>Contact Number</label>\r\n                        <input type=\"text\"\r\n                            placeholder=\"Enter Contact Number\" \r\n                            name=\"contactNumber\"\r\n                            value = {officeEmployeeSignup.contactNumber}\r\n                            required\r\n                            onChange = {handleOnChange} \r\n                        />\r\n\r\n                        <label>Gender</label>  \r\n                        <select name=\"gender\" value = {officeEmployeeSignup.gender} onChange = {handleOnChange}>\r\n                            <option value=\"Male\">Male</option>\r\n                            <option value=\"Female\">Female</option>\r\n                        </select>\r\n\r\n                        <label>Job Title</label>\r\n                        <select name=\"jobtitle\" value = {officeEmployeeSignup.jobtitle} onChange = {handleOnChange}>\r\n                            <option value=\"Office Clerk\">Office Clerk</option>\r\n                            <option value=\"Manager\">Manager</option>\r\n                        </select>\r\n\r\n                        <label >Bith Date</label>\r\n                        <DatePicker\r\n                           // className = \"datepicker-birthdate\"\r\n                            selected = {officeEmployeeSignup.birthdate}\r\n                            onChange = {e =>  setOfficeEmployeeSignup({...officeEmployeeSignup, birthdate: e})}\r\n                            dateFormat = 'MM/dd/yyyy'\r\n                            placeholderText = \"Birthdate\"\r\n                            isClearable\r\n                            showYearDropdown\r\n                            scrollableYearDropdown\r\n                            maxDate = {new Date()}\r\n                        />\r\n\r\n                        <label> Company Branch</label>\r\n                        <Select \r\n                            classNamePrefix=\"mySelect\" \r\n                            options={options}\r\n                            placeholder = \"Choose company branch\" \r\n                            value =  {options && options.find(obj => obj.value === officeEmployeeSignup.branch)}\r\n                            onChange =  {e => setOfficeEmployeeSignup({...officeEmployeeSignup, branch: e.value})}\r\n                            isSearchable\r\n                            autoFocus\r\n                            maxMenuHeight = {250}\r\n                         />\r\n\r\n                        <div className = \"status-swtich-container\">\r\n                            <label className = \"employeestatus-switch\">Status:</label>\r\n                            <Switch \r\n                                className= \"react-swtich\"\r\n                                onChange = {checked => setChecked(checked)}\r\n                                checked = {checked}\r\n                                onHandleColor = \"#3981e5\"\r\n                                checkedIcon = {<div style = {activeTextSwitch}> active </div>}\r\n                                uncheckedIcon = {<div style = {inactiveTextSwitch}> inactive </div>}\r\n                                width = {90}\r\n                                height = {25}\r\n                            />\r\n\r\n                        </div>\r\n                       \r\n                    </div>\r\n                    <div className = \"modal-submit-container\">\r\n                        <button> Submit </button>\r\n                    </div>\r\n                </form>\r\n\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) =>{\r\n    console.log(state);\r\n    return{\r\n        branches: state.firestore.data.Branch,\r\n        courierID: state.courier.courierId,\r\n        addOffice_Emp_Error: state.officeEmployees.addOffice_Emp_Error, \r\n        auth: state.firebase.auth\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return{\r\n        addOfficeEmployee: (officeEmployeeSignup) => dispatch(addOfficeEmployee(officeEmployeeSignup)),\r\n    }\r\n} \r\n\r\n\r\n export default connect(mapStateToProps, mapDispatchToProps)(AddOfficeEmployee)\r\n","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\store\\reducers\\officeEmployeeReducer.js",[],"C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\store\\actions\\officeEmployeeAction.js",[],"C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\AddDispatchRider.js",[],"C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\store\\reducers\\dispatchRiderReducer.js",[],"C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\CustomsStyles.js",[],"C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\store\\actions\\dispatchRiderAction.js",[],"C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\AddItem.js",[],"C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\store\\reducers\\itemReducer.js",[],"C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\store\\actions\\itemAction.js",[],"C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\AddItemToPrint.js",[],"C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\ItemPrint.js",[],"C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\AssignRiderInItem.js",["230"],"import React, {useMemo, useEffect, useState} from 'react'\r\nimport { connect } from 'react-redux';\r\nimport fire from '../config/fbConfig' \r\nimport { useHistory} from 'react-router-dom';\r\nimport moment from 'moment';\r\nimport {firestoreConnect} from 'react-redux-firebase'\r\nimport {compose} from 'redux'\r\n\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport paginationFactory  from 'react-bootstrap-table2-paginator';\r\nimport { AssignRiderColumns } from './TableColumns';\r\nimport { getSelectedUnassignedItem, getBranchBarangays } from '../store/actions/itemAction';\r\n\r\nconst AssignRiderInItem = (props) => {\r\n    const {courierID, courBranch} = props;\r\n    const history = useHistory();\r\n    const [item , setItem] = useState([]);\r\n    const [loading , setLoading] = useState(false);\r\n    const [category, setCategory] = useState('');\r\n    const [filterItems, setFilterItems] = useState([]);\r\n    const [searchInput, setSearchInput] = useState('');\r\n    \r\n    const ref = fire.firestore().collection(\"Items\").where(\"courier_id\", \"==\", courierID)\r\n        .where(\"itemRecipientBranch\", \"==\", courBranch)\r\n        .where(\"status\", \"==\", \"unassigned\");\r\n\r\n    function getItem(){\r\n        setLoading(true);\r\n        ref.onSnapshot((querySnapshot) => {     \r\n            var itemsdata= [];\r\n                querySnapshot.forEach((doc) => {  \r\n                    var itemObj = {\r\n                        item_id: doc.data().item_id,\r\n                        itemSendername: doc.data().itemSendername,\r\n                        itemSenderContactNumber: doc.data().itemSenderContactNumber,\r\n                        itemSenderAddressStreet: doc.data().itemSenderAddressStreet,\r\n                        itemSenderAddressBarangay: doc.data().itemSenderAddressBarangay,\r\n                        itemSenderAddressCity: doc.data().itemSenderAddressCity,\r\n                        itemSenderAddressProvince: doc.data().itemSenderAddressProvince,\r\n                        itemRecipientname: doc.data().itemRecipientname,\r\n                        itemRecipientContactNumber: doc.data().itemRecipientContactNumber,\r\n                        itemRecipientAddressStreet: doc.data().itemRecipientAddressStreet,\r\n                        itemRecipientAddressBarangay: doc.data().itemRecipientAddressBarangay,\r\n                        itemRecipientAddressCity: doc.data().itemRecipientAddressCity,\r\n                        itemRecipientAddressProvince: doc.data().itemRecipientAddressProvince, \r\n                        itemRecipientBranch: doc.data().itemRecipientBranch,\r\n                        itemSenderBranch: doc.data().itemSenderBranch,\r\n                        itemqty: doc.data().itemqty,\r\n                        itemweight: doc.data().itemweight,\r\n                        itemCOD: doc.data().itemCOD,\r\n                        courier_id: doc.data().courier_id, \r\n                        status: doc.data().status,\r\n                        encodedBy: doc.data().encodedBy,\r\n                        date_encoded: moment(doc.data().date_encoded.toDate()).format('LL').toString(),\r\n                    }                \r\n                    itemsdata.push(itemObj)\r\n                });\r\n               setItem(itemsdata);\r\n               setLoading(false);\r\n        });    \r\n    }\r\n    \r\n        \r\n    useEffect(() => {\r\n        getItem();\r\n    }, [])\r\n\r\n    \r\n    const columns = useMemo(() => AssignRiderColumns, []);\r\n    const rowEvents = {\r\n        onDoubleClick: (e, row) => {\r\n           // console.log(row);\r\n            props.getSelectedUnassignedItem(row)\r\n            props.getBranchBarangays(courBranch)\r\n            history.push('/selectAssignRider');\r\n        }\r\n    }\r\n    const selectRow = {\r\n        mode: \"radio\",\r\n        clickToSelect: true,\r\n        bgColor: \"#00BFFF\",\r\n      };\r\n\r\n    const onhandleChange = (e) => {\r\n        setSearchInput(e.target.value)\r\n        let newArray = item.filter((sinlgeItem) => {\r\n            if(category === \"Item ID\"){\r\n                let searchValue = sinlgeItem.item_id.toLowerCase();\r\n                return searchValue.indexOf(e.target.value) !==-1;\r\n            } else if(category === \"Recipient Name\"){\r\n                let searchValue = sinlgeItem.itemRecipientname.toLowerCase();\r\n                return searchValue.indexOf(e.target.value) !==-1;\r\n            }     \r\n            else if(category === \"Sender Name\"){\r\n                let searchValue = sinlgeItem.itemSendername.toLowerCase();\r\n                return searchValue.indexOf(e.target.value) !==-1;\r\n            }\r\n            return sinlgeItem;   \r\n        });\r\n        setFilterItems(newArray);\r\n    }\r\n      \r\n      if(loading){\r\n          return <p>loading.....</p>\r\n      }\r\n\r\n    return (\r\n        <div className = \"container-fluid\">\r\n            <div className = \"row justify-content-md-center\">\r\n                <h1>Assign Dispatch Rider</h1>   \r\n            </div>           \r\n            <div className = \"ARtable\">\r\n                <div className = \"d-flex justify-content-center searchOfAssignRiderItemDiv\">\r\n                    <input value = {searchInput} onChange = {onhandleChange} type = \"text\" placeholder =\"Seacrh for....\" className= \"searchOfAssignRiderItem\"></input>\r\n                    <select value = {category} onChange = {(e) => setCategory(e.target.value)}>\r\n                        <option value=\"\" disabled selected hidden>Choose Category...</option>\r\n                        <option value = \"Item ID\">Item ID</option>\r\n                        <option value = \"Recipient Name\">Recipient Name</option>\r\n                        <option value = \"Sender Name\">Sender Name</option>\r\n                    </select>\r\n                </div>  \r\n                <BootstrapTable\r\n                striped \r\n                keyField = \"item_id\"\r\n                data = {!searchInput? item : filterItems}\r\n                columns = {columns}\r\n                pagination = {paginationFactory()}\r\n                rowEvents = {rowEvents}\r\n                selectRow = {selectRow}\r\n                sort={ { dataField: 'date_encoded', order: 'asc' } }\r\n                />\r\n            </div> \r\n            <div>\r\n                <button className = \"btn-primary\" onClick = {() => {history.push('/items')}}>Back</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) =>{\r\n    //console.log(state)\r\n    return{\r\n        courierID: state.courier.courierId,\r\n        courBranch: state.courier.courBranch,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>{\r\n    return {\r\n        getSelectedUnassignedItem: (item) => dispatch(getSelectedUnassignedItem(item)),\r\n        getBranchBarangays: (courBranch) => dispatch(getBranchBarangays(courBranch)),\r\n    }\r\n}\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps ),\r\n    firestoreConnect((props) => [\r\n        {\r\n        collection: 'Dispatch Riders',\r\n        where: [\r\n            ['courier_id', '==', props.courierID],\r\n            ['branch', '==', props.courBranch]\r\n        ]\r\n    },\r\n])\r\n) (AssignRiderInItem)\r\n\r\n","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\TableColumns.js",[],"C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\SelectAssignRider.js",["231","232"],"import React, { useMemo, useState, useEffect } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport fire from '../config/fbConfig';\r\n\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport paginationFactory  from 'react-bootstrap-table2-paginator';\r\nimport { DispatchRidersAssign } from './TableColumns';\r\nimport { addItemDel } from '../store/actions/itemAction';\r\n\r\nimport DatePicker from 'react-datepicker'\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\nimport { toast } from 'react-toastify'\r\nimport 'react-toastify/dist/ReactToastify.css'\r\n\r\ntoast.configure();\r\n\r\nconst SelectAssignRider = (props) => {\r\n    const history = useHistory();\r\n    const {item, auth, dispatchRiders, barangays} = props;   \r\n    const [showRiderList, setShowRiderList] =useState(false);\r\n    let displayName = auth.displayName;\r\n    let assignedBY = displayName.split(\"@\");\r\n    const [dRName, setDRName] = useState(\"\");\r\n\r\n    const [itemDel, setItemDel] = useState({\r\n        item_id: item.item_id,\r\n        rider_id: null,\r\n        assignedby: assignedBY[1],\r\n        date_assigned: new Date(),\r\n        del_date_sched: null,\r\n        item_weight: item.itemweight,\r\n        itemRecipientContactNumber: item.itemRecipientContactNumber,\r\n    });\r\n\r\n    const columns = useMemo(() => DispatchRidersAssign, []);\r\n    const rowEvents = {\r\n        onClick: (e, row) => {\r\n            //console.log(row.id);   \r\n            setItemDel({...itemDel, rider_id: row.id})\r\n            setDRName(row.fname + \" \" + row.mname + \" \" + row.lname)\r\n        }\r\n    }\r\n\r\n    const selectRow = {\r\n        mode: \"radio\",\r\n        clickToSelect: true,\r\n        bgColor: \"#00BFFF\",\r\n      };\r\n\r\n    const onClickshowRider = (e) =>{\r\n        e.preventDefault();\r\n        itemDel.del_date_sched ? setShowRiderList(true): setShowRiderList(false) \r\n        setDRName('')\r\n        setItemDel({...itemDel, rider_id: ''})\r\n    }\r\n\r\n    const [selectedbrgy, setSelectedBrgy] = useState(item.itemRecipientAddressBarangay);\r\n    const [newBrgy, setNewBrgy] = useState([]);\r\n    const [bry, setbry] = useState([]);\r\n\r\n    function firstFilterBrgy () {\r\n        let riderslist = [] \r\n        dispatchRiders && dispatchRiders.map((rider, index) =>{           \r\n            let counter = 0;\r\n            let weightSum = 0;\r\n            fire.firestore().collection(\"Delivery_Header\")\r\n            .where(\"rider_id\", \"==\", rider.id)\r\n            .where(\"del_date_sched\", \"==\", itemDel.del_date_sched)\r\n            .get()\r\n            .then((querySnapshot) => {\r\n                querySnapshot.forEach((doc) => {\r\n                    weightSum = weightSum + parseInt(doc.data().item_weight);\r\n                    counter ++;\r\n                });\r\n                var riders = {\r\n                    id: rider.id,\r\n                    fname: rider.fname,\r\n                    mname: rider.mname,\r\n                    lname: rider.lname,\r\n                    designateBarangay: rider.designateBarangay,\r\n                    vehicle_type: rider.vehicle_type,\r\n                    contactNumber: rider.contactNumber,\r\n                    itemdaytotal: counter.toString(),\r\n                    itemtotalweight: weightSum.toString()\r\n                };\r\n                riderslist.push(riders)\r\n            })     \r\n        });\r\n        setbry(riderslist);\r\n        console.log(bry)       \r\n        let newArray = bry.filter((rider) => {\r\n            let searchValue = rider.designateBarangay;\r\n            return searchValue.indexOf(item.itemRecipientAddressBarangay) !==-1;\r\n        });\r\n        setNewBrgy(newArray);   \r\n       \r\n    }\r\n\r\n    useEffect(() => {\r\n        firstFilterBrgy();\r\n    },[itemDel.del_date_sched])\r\n\r\n\r\n   // console.log(dispatchRiders)\r\n\r\n    const onSelectChange = (e) => {\r\n        setSelectedBrgy(e.target.value);\r\n        let newArray = bry.filter((rider) => {\r\n            let searchValue = rider.designateBarangay;\r\n            return searchValue.indexOf(e.target.value) !==-1;\r\n        });\r\n        setNewBrgy(newArray);\r\n    }\r\n\r\n    const onHandleSubmit = (e) =>{\r\n        e.preventDefault();\r\n        if(itemDel.rider_id && itemDel.del_date_sched){\r\n           props.addItemDel(itemDel)\r\n           history.push('/assignRiderInItem')\r\n        }else {\r\n            toast.error('Pls.. Select Delivery Date Schedule / Dispatch Rider')\r\n        }\r\n    }\r\n\r\n    //console.log(item.item_id)\r\n    return (\r\n        <div className = \"container main-cntr\" >\r\n            <div className = \"row justify-content-md-center\">\r\n                <h1>Assign Dispatch Rider</h1>   \r\n            </div>  \r\n            <div className = \"row justify-content-md-center sar-tn\">\r\n                <div className = \"row\"><h6>Item ID</h6> </div>  \r\n                <div className=\"w-100\"></div>\r\n                <div className = \"row\" ><h1>{item.item_id}</h1> </div>  \r\n            </div>\r\n            <div className = \"row justify-content-md-center\">\r\n                <div className=\"card crd-sender\">\r\n                    <h5 className=\"card-title\">Sender</h5>\r\n                    <p className=\"card-text\"> Name: {item.itemSendername}</p>\r\n                    <p className=\"card-text\"> Contact Number: {item.itemSenderContactNumber}</p>\r\n                    <p className=\"card-text\"> Address: {item.itemSenderAddressStreet}</p>\r\n                    <p className=\"card-text\"> Barangay: {item.itemSenderAddressBarangay}</p>\r\n                    <p className=\"card-text\"> City: {item.itemSenderAddressCity}</p>\r\n                    <p className=\"card-text\"> Province: {item.itemSenderAddressProvince}</p>\r\n                </div>\r\n                <div className=\"card crd-recipient\">\r\n                    <h5 className=\"card-title\">Recipient</h5>\r\n                    <p className=\"card-text\"> Name: {item.itemRecipientname}</p>\r\n                    <p className=\"card-text\"> Contact Number: {item.itemRecipientContactNumber}</p>\r\n                    <p className=\"card-text\"> Address: {item.itemRecipientAddressStreet}</p>\r\n                    <p className=\"card-text\"> Barangay: {item.itemRecipientAddressBarangay}</p>\r\n                    <p className=\"card-text\"> City: {item.itemRecipientAddressCity}</p>\r\n                    <p className=\"card-text\"> Province: {item.itemRecipientAddressProvince}</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"row justify-content-md-center\">\r\n                <div className=\"row justify-content-md-center item-desc\">\r\n                    <div className=\"col-sm\">\r\n                        Item Weight: {item.itemweight}\r\n                    </div>\r\n                    <div className=\"col-sm\">\r\n                        Item Quantity: {item.itemqty}\r\n                    </div>\r\n                    <div className=\"col-sm\">\r\n                        COD: {item.itemCOD}\r\n                    </div>\r\n                </div>      \r\n            </div>\r\n            <hr/>\r\n            <div className=\"row justify-content-md-center\">\r\n                <h5>Delivery Date Schedule</h5>\r\n                <div className=\"w-100\"></div>\r\n                <div className=\"d-flex justify-content-center\">\r\n                    <DatePicker\r\n                        className = \"datepicker-aritem\"\r\n                        selected = {itemDel.del_date_sched}\r\n                        onChange = {e =>  setItemDel({...itemDel, del_date_sched: e})}\r\n                        dateFormat = 'MM/dd/yyyy'\r\n                        placeholderText = \"Choose Delivery Date Schedule\"\r\n                        isClearable\r\n                        minDate = {new Date()}\r\n                    />  \r\n                </div>\r\n            </div>\r\n            <div className=\"row justify-content-md-center\">\r\n                <div><button type=\"button\" className=\"btn btn-primary\" onClick = {onClickshowRider}>Show Rider List</button></div>\r\n                <div className=\"w-100\"></div>\r\n                <div className= \"riderlist\">\r\n                    { showRiderList ?\r\n                    <div className = \"riderTable\">\r\n                        <div className = \"d-flex justify-content-center\">\r\n                            <h6 className = \"brgyselectqoute\">Select Brgy: </h6>\r\n                            <select className = \"brgySelect\" name= \"barangay\" value = {selectedbrgy} onChange = {onSelectChange}>\r\n                                {barangays.map(barangay =>\r\n                                <option key={barangay.brgyname} value={barangay.brgyname}> {barangay.brgyname} </option>\r\n                                )};\r\n                            </select>\r\n                         </div>\r\n                            <BootstrapTable\r\n                                striped\r\n                                keyField = \"id\"\r\n                                data = {newBrgy}\r\n                                columns = {columns}\r\n                                pagination = {paginationFactory()}\r\n                                rowEvents = {rowEvents}\r\n                                selectRow = {selectRow}\r\n                                sort={ { dataField: 'date_encoded', order: 'asc' } }\r\n                            />\r\n                        \r\n                            <h5 className = \"riderlist\">Dispatch Rider: {dRName}</h5>\r\n                    </div>\r\n                    : \r\n                    <p>Choose Delivery Date Schedule First</p>}\r\n                </div>          \r\n            </div>\r\n            <hr/>\r\n            <div className=\"row justify-content-md-center btn-cntr\">\r\n                <div className = \"col col-sm-4\">\r\n                    <button className = \"btn-primary\" onClick = {() => {history.push('/assignRiderInItem')}}>&lt;&lt;Back</button>\r\n                </div>\r\n                <div className = \"col col-sm-2\">\r\n                    <button className = \"drsubmit\" onClick = {onHandleSubmit}>Submit</button>\r\n                </div>\r\n                \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nconst mapStateToProps = (state) =>{\r\n    //console.log(state)\r\n    return{\r\n       item: state.items.selectedUnAssignedItems,\r\n       auth: state.firebase.auth,\r\n       dispatchRiders: state.firestore.ordered[\"Dispatch Riders\"],\r\n       barangays: state.items.getbarangays\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>{\r\n    return {\r\n        addItemDel: (itemDel) => dispatch(addItemDel(itemDel)),\r\n    }\r\n}\r\n export default connect(mapStateToProps, mapDispatchToProps) (SelectAssignRider)\r\n\r\n","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\EntryItems.js",["233","234"],"import React, {useState, useMemo, useEffect} from 'react'\r\n\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport paginationFactory  from 'react-bootstrap-table2-paginator';\r\nimport { Modal, Button } from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\nimport fire from '../config/fbConfig' \r\nimport moment from 'moment';\r\nimport { AssignRiderColumns } from './TableColumns';\r\n\r\nconst EntryItems = (props) => {\r\n    const {courierID, courBranch} = props;\r\n    const [item , setItem] = useState([]);\r\n    const [loading , setLoading] = useState(false);\r\n    const [category, setCategory] = useState('Choose Category');\r\n    const [filterItems, setFilterItems] = useState([]);\r\n    const [searchInput, setSearchInput] = useState('');\r\n    const [modalInfo, setModalInfo] = useState([]);\r\n    const [showModal, setShowModal] = useState(false);\r\n\r\n    const [show, setShow] = useState(false);\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    const ref = fire.firestore().collection(\"Items\").where(\"courier_id\", \"==\", courierID)\r\n        .where(\"itemSenderBranch\", \"==\", courBranch)\r\n\r\n    function getItem(){\r\n        setLoading(true);\r\n        ref.onSnapshot((querySnapshot) => {     \r\n            var itemsdata= [];\r\n                querySnapshot.forEach((doc) => {  \r\n                    var itemObj = {\r\n                        item_id: doc.data().item_id,\r\n                        itemSendername: doc.data().itemSendername,\r\n                        itemSenderContactNumber: doc.data().itemSenderContactNumber,\r\n                        itemSenderAddressStreet: doc.data().itemSenderAddressStreet,\r\n                        itemSenderAddressBarangay: doc.data().itemSenderAddressBarangay,\r\n                        itemSenderAddressCity: doc.data().itemSenderAddressCity,\r\n                        itemSenderAddressProvince: doc.data().itemSenderAddressProvince,\r\n                        itemRecipientname: doc.data().itemRecipientname,\r\n                        itemRecipientContactNumber: doc.data().itemRecipientContactNumber,\r\n                        itemRecipientAddressStreet: doc.data().itemRecipientAddressStreet,\r\n                        itemRecipientAddressBarangay: doc.data().itemRecipientAddressBarangay,\r\n                        itemRecipientAddressCity: doc.data().itemRecipientAddressCity,\r\n                        itemRecipientAddressProvince: doc.data().itemRecipientAddressProvince, \r\n                        itemRecipientBranch: doc.data().itemRecipientBranch,\r\n                        itemSenderBranch: doc.data().itemSenderBranch,\r\n                        itemqty: doc.data().itemqty,\r\n                        itemweight: doc.data().itemweight,\r\n                        itemCOD: doc.data().itemCOD,\r\n                        courier_id: doc.data().courier_id, \r\n                        status: doc.data().status,\r\n                        encodedBy: doc.data().encodedBy,\r\n                        date_encoded: moment(doc.data().date_encoded.toDate()).format('LL').toString(),\r\n                    }                \r\n                    itemsdata.push(itemObj)\r\n                });\r\n                setItem(itemsdata);\r\n                setLoading(false);\r\n        });    \r\n    }\r\n    \r\n    useEffect(() => {\r\n        getItem();\r\n    }, [])\r\n        \r\n    const columns = useMemo(() => AssignRiderColumns, []);\r\n    const rowEvents = {\r\n        onDoubleClick: (e, row) => {\r\n           console.log(row);    \r\n           setModalInfo(row);\r\n           toggleTrueFalse();\r\n        }\r\n    }\r\n    const selectRow = {\r\n        mode: \"radio\",\r\n        clickToSelect: true,\r\n        bgColor: \"#00BFFF\",\r\n      };\r\n\r\n    const toggleTrueFalse = () => {\r\n        setShowModal(handleShow);\r\n    };\r\n\r\n\r\n    const ModalContent = () =>{\r\n        return (\r\n            <Modal show = {show} onHide ={handleClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>\r\n                        {modalInfo.item_id}\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <h5>Sender Information</h5>\r\n                    <ul>\r\n                        <ol>Name: {modalInfo.itemSendername}</ol>\r\n                        <ol>Contact Number: {modalInfo.itemSenderContactNumber}</ol>\r\n                        <ol>Address: {modalInfo.itemSenderAddressStreet},\r\n                             {modalInfo.itemSenderAddressBarangay}, \r\n                             {modalInfo.itemSenderAddressCity}, {modalInfo.itemSenderAddressProvince}\r\n                         </ol>\r\n                    </ul>\r\n                    <h5>Recipient Information</h5>\r\n                    <ul>\r\n                        <ol>Name: {modalInfo.itemRecipientname}</ol>\r\n                        <ol>Contact Number: {modalInfo.itemRecipientContactNumber}</ol>\r\n                        <ol>Address: {modalInfo.itemRecipientAddressStreet},\r\n                             {modalInfo.itemRecipientAddressBarangay}, \r\n                             {modalInfo.itemRecipientAddressCity}, {modalInfo.itemRecipientAddressProvince}\r\n                         </ol>\r\n                    </ul>\r\n                    <h5>Item Desc.</h5>\r\n                    <ul>\r\n                        <ol>QTY: {modalInfo.itemqty}</ol>\r\n                        <ol>Weight: {modalInfo.itemweight} KGS.</ol>\r\n                        <ol>COD: PHP {modalInfo.itemCOD}</ol>\r\n                        <ol>Encoded By: {modalInfo.encodedBy}</ol>\r\n                        <ol>Encoded Date: {modalInfo.date_encoded}</ol>\r\n                        <ol>Status: {modalInfo.status}</ol>\r\n                    </ul>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant = \"secondary\" onClick = {handleClose}>\r\n                        Close\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n       )\r\n    }\r\n    \r\n    const onhandleChange = (e) => {\r\n        setSearchInput(e.target.value)\r\n        let newArray = item.filter((sinlgeItem) => {\r\n            if(category === \"Item ID\"){\r\n                let searchValue = sinlgeItem.item_id.toLowerCase();\r\n                return searchValue.indexOf(e.target.value) !==-1;\r\n            } else if(category === \"Recipient Name\"){\r\n                let searchValue = sinlgeItem.itemRecipientname.toLowerCase();\r\n                return searchValue.indexOf(e.target.value) !==-1;\r\n            }     \r\n            else if(category === \"Sender Name\"){\r\n                let searchValue = sinlgeItem.itemSendername.toLowerCase();\r\n                return searchValue.indexOf(e.target.value) !==-1;\r\n            }\r\n            else if(category === \"ByDaTe\"){\r\n                let searchValue = sinlgeItem.date_encoded.toLowerCase();\r\n                return searchValue.indexOf(e.target.value) !==-1;\r\n            }\r\n            return sinlgeItem;   \r\n        });\r\n        setFilterItems(newArray);\r\n    }\r\n\r\n    if(loading){\r\n        return <p>loading.....</p>\r\n    }\r\n\r\n    return (\r\n        <div className = \"container-fluid\">\r\n            <div className = \"row justify-content-md-center\">\r\n                <h2>Branch Items</h2>   \r\n            </div>  \r\n            <div className = \"ARtable\">\r\n                <div className = \"d-flex justify-content-center searchEntryItems\">\r\n                    <input value = {searchInput} onChange = {onhandleChange} type = \"text\" placeholder =\"Seacrh for....\" className= \"searchOfAssignRiderItem\"></input>\r\n                    \r\n                    <select value = {category}  onChange = {(e) => setCategory(e.target.value)}> \r\n                        <option value=\"\">Choose Category...</option>\r\n                        <option value = \"Item ID\">Item ID</option>\r\n                        <option value = \"Recipient Name\">Recipient Name</option>\r\n                        <option value = \"Sender Name\">Sender Name</option>\r\n                        <option value = \"ByDaTe\">Date</option>\r\n                    </select>\r\n                </div>  \r\n                <BootstrapTable\r\n                    striped \r\n                    keyField = \"item_id\"\r\n                    data = {!searchInput? item : filterItems}\r\n                    columns = {columns}\r\n                    pagination = {paginationFactory()}\r\n                    rowEvents = {rowEvents}\r\n                    selectRow = {selectRow}\r\n                />\r\n                {show ? <ModalContent/> : null}\r\n            </div> \r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        courierID: state.courier.courierId,\r\n        courBranch: state.courier.courBranch,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps) (EntryItems)\r\n","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\AllItems.js",["235","236"],"import React, {useState, useMemo, useEffect} from 'react'\r\n\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport paginationFactory  from 'react-bootstrap-table2-paginator';\r\nimport { Modal, Button } from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\nimport fire from '../config/fbConfig' \r\nimport moment from 'moment';\r\nimport { AssignRiderColumns } from './TableColumns';\r\n\r\nconst AllItems = (props) => {\r\n    const {courierID} = props\r\n    const [item , setItem] = useState([]);\r\n    const [loading , setLoading] = useState(false);\r\n    const [category, setCategory] = useState('Choose Category');\r\n    const [filterItems, setFilterItems] = useState([]);\r\n    const [searchInput, setSearchInput] = useState('');\r\n    const [modalInfo, setModalInfo] = useState([]);\r\n    const [showModal, setShowModal] = useState(false);\r\n\r\n    const [show, setShow] = useState(false);\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    const firstRef = fire.firestore().collection(\"Items\").where(\"courier_id\", \"==\", courierID).where(\"status\", \"==\", \"unassigned\");\r\n    const secondRef = fire.firestore().collection(\"Items\").where(\"courier_id\", \"==\", courierID);\r\n\r\n    function getAllItems(){\r\n        setLoading(true);\r\n        firstRef.get()\r\n        .then((querySnapshot) => {\r\n            querySnapshot.forEach((doc) => {                    \r\n                var itemObj = {\r\n                     item_id :  doc.data().item_id,\r\n                     itemSendername: doc.data().itemSendername,\r\n                     itemSenderContactNumber: doc.data().itemSenderContactNumber,\r\n                     itemSenderAddressStreet: doc.data().itemSenderAddressStreet,\r\n                     itemSenderAddressBarangay: doc.data().itemSenderAddressBarangay,\r\n                     itemSenderAddressCity: doc.data().itemSenderAddressCity,\r\n                     itemSenderAddressProvince: doc.data().itemSenderAddressProvince,\r\n                     itemRecipientname: doc.data().itemRecipientname,\r\n                     itemRecipientContactNumber: doc.data().itemRecipientContactNumber,\r\n                     itemRecipientAddressStreet: doc.data().itemRecipientAddressStreet,\r\n                     itemRecipientAddressBarangay: doc.data().itemRecipientAddressBarangay,\r\n                     itemRecipientAddressCity: doc.data().itemRecipientAddressCity,\r\n                     itemRecipientAddressProvince: doc.data().itemRecipientAddressProvince, \r\n                     itemRecipientBranch: doc.data().itemRecipientBranch,\r\n                     itemSenderBranch: doc.data().itemSenderBranch,\r\n                     itemqty: doc.data().itemqty,\r\n                     itemweight: doc.data().itemweight,\r\n                     itemCOD: doc.data().itemCOD,\r\n                     courier_id: doc.data().courier_id, \r\n                     status: doc.data().status,\r\n                     encodedBy: doc.data().encodedBy,\r\n                     date_encoded: moment(doc.data().date_encoded.toDate()).format('LL').toString(),    \r\n                     assignedby: \"NA\", // check if no assigned rider it should be returned into NA\r\n                     rider_name: \"NA\",\r\n                     date_assigned: \"NA\",\r\n                     del_date_sched: \"NA\",\r\n                }                               \r\n                setItem((item) => [...item, itemObj])    \r\n            });\r\n        });\r\n\r\n        secondRef.get().then((querySnapshot) => {\r\n            querySnapshot.forEach((doc) => {\r\n                var item_id =  doc.data().item_id;\r\n                var itemSendername= doc.data().itemSendername;\r\n                var itemSenderContactNumber= doc.data().itemSenderContactNumber;\r\n                var itemSenderAddressStreet= doc.data().itemSenderAddressStreet;\r\n                var itemSenderAddressBarangay= doc.data().itemSenderAddressBarangay;\r\n                var itemSenderAddressCity= doc.data().itemSenderAddressCity;\r\n                var itemSenderAddressProvince= doc.data().itemSenderAddressProvince;\r\n                var itemRecipientname= doc.data().itemRecipientname;\r\n                var itemRecipientContactNumber= doc.data().itemRecipientContactNumber;\r\n                var itemRecipientAddressStreet= doc.data().itemRecipientAddressStreet;\r\n                var itemRecipientAddressBarangay= doc.data().itemRecipientAddressBarangay;\r\n                var itemRecipientAddressCity= doc.data().itemRecipientAddressCity;\r\n                var itemRecipientAddressProvince= doc.data().itemRecipientAddressProvince; \r\n                var itemRecipientBranch= doc.data().itemRecipientBranch;\r\n                var itemSenderBranch= doc.data().itemSenderBranch;\r\n                var itemqty= doc.data().itemqty;\r\n                var itemweight= doc.data().itemweight;\r\n                var itemCOD= doc.data().itemCOD;\r\n                var courier_id= doc.data().courier_id; \r\n                var status= doc.data().status;\r\n                var encodedBy= doc.data().encodedBy;\r\n                var date_encoded= moment(doc.data().date_encoded.toDate()).format('LL').toString();    \r\n            \r\n                var docRef = fire.firestore().collection(\"Delivery_Header\").where(\"item_id\", \"==\", item_id);\r\n                docRef.get()\r\n                .then((querySnapshot) => {\r\n                    querySnapshot.forEach((doc) => {                    \r\n                        var itemObj = {\r\n                            item_id : item_id,  \r\n                            itemSendername : itemSendername,\r\n                            itemSenderContactNumber: itemSenderContactNumber,\r\n                            itemSenderAddressStreet: itemSenderAddressStreet,\r\n                            itemSenderAddressBarangay: itemSenderAddressBarangay,\r\n                            itemSenderAddressCity: itemSenderAddressCity,\r\n                            itemSenderAddressProvince: itemSenderAddressProvince,\r\n                            itemRecipientname: itemRecipientname, \r\n                            itemRecipientContactNumber: itemRecipientContactNumber,\r\n                            itemRecipientAddressStreet: itemRecipientAddressStreet,\r\n                            itemRecipientAddressBarangay: itemRecipientAddressBarangay,\r\n                            itemRecipientAddressCity: itemRecipientAddressCity,\r\n                            itemRecipientAddressProvince: itemRecipientAddressProvince,\r\n                            itemRecipientBranch: itemRecipientBranch,\r\n                            itemSenderBranch: itemSenderBranch,\r\n                            itemqty: itemqty,\r\n                            itemweight: itemweight,\r\n                            itemCOD: itemCOD,\r\n                            courier_id: courier_id,\r\n                            status: status,\r\n                            encodedBy: encodedBy,\r\n                            date_encoded: date_encoded,\r\n                            assignedby: doc.data().assignedby, // check if no assigned rider it should be returned into NA\r\n                            rider_name: doc.data().rider_name,\r\n                            date_assigned: moment(doc.data().date_assigned.toDate()).format('LL').toString(),\r\n                            del_date_sched: moment(doc.data().del_date_sched.toDate()).format('LL').toString(),\r\n                        }                               \r\n                        setItem((item) => [...item, itemObj])    \r\n                    });\r\n                });\r\n            });\r\n            setLoading(false);\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        getAllItems();  \r\n    }, [])\r\n\r\n    const columns = useMemo(() => AssignRiderColumns, []);\r\n    const rowEvents = {\r\n        onDoubleClick: (e, row) => {\r\n           console.log(row);    \r\n           setModalInfo(row);\r\n           toggleTrueFalse();\r\n        }\r\n    }\r\n    const selectRow = {\r\n        mode: \"radio\",\r\n        clickToSelect: true,\r\n        bgColor: \"#00BFFF\",\r\n    };\r\n\r\n    const toggleTrueFalse = () => {\r\n        setShowModal(handleShow);\r\n    };\r\n\r\n    const ModalContent = () =>{\r\n        return (\r\n            <Modal show = {show} onHide ={handleClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>\r\n                        {modalInfo.item_id}\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <h5>Sender Information</h5>\r\n                    <ul>\r\n                        <ol>Name: {modalInfo.itemSendername}</ol>\r\n                        <ol>Contact Number: {modalInfo.itemSenderContactNumber}</ol>\r\n                        <ol>Address: {modalInfo.itemSenderAddressStreet},\r\n                             {modalInfo.itemSenderAddressBarangay}, \r\n                             {modalInfo.itemSenderAddressCity}, {modalInfo.itemSenderAddressProvince}\r\n                         </ol>\r\n                    </ul>\r\n                    <h5>Recipient Information</h5>\r\n                    <ul>\r\n                        <ol>Name: {modalInfo.itemRecipientname}</ol>\r\n                        <ol>Contact Number: {modalInfo.itemRecipientContactNumber}</ol>\r\n                        <ol>Address: {modalInfo.itemRecipientAddressStreet},\r\n                             {modalInfo.itemRecipientAddressBarangay}, \r\n                             {modalInfo.itemRecipientAddressCity}, {modalInfo.itemRecipientAddressProvince}\r\n                         </ol>\r\n                    </ul>\r\n                    <h5>Item Desc.</h5>\r\n                    <ul>\r\n                        <ol>QTY: {modalInfo.itemqty}</ol>\r\n                        <ol>Weight: {modalInfo.itemweight} KGS.</ol>\r\n                        <ol>COD: PHP {modalInfo.itemCOD}</ol>\r\n                        <ol>Encoded By: {modalInfo.encodedBy}</ol>\r\n                        <ol>Encoded Date: {modalInfo.date_encoded}</ol>\r\n                        <ol>Assigned By: {modalInfo.assignedby}</ol>\r\n                        <ol>Assigned Date: {modalInfo.date_assigned}</ol>\r\n                        <ol>Deliver Schedule: {modalInfo.del_date_sched}</ol>\r\n                        <ol>Assigned Dispatch Rider: {modalInfo.rider_name}</ol>\r\n                        <ol>Item Status: {modalInfo.status}</ol>\r\n                    </ul>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant = \"secondary\" onClick = {handleClose}>\r\n                        Close\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n       )\r\n    }\r\n\r\n    const onhandleChange = (e) => {\r\n        setSearchInput(e.target.value)\r\n        let newArray = item.filter((sinlgeItem) => {\r\n            if(category === \"Item ID\"){\r\n                let searchValue = sinlgeItem.item_id.toLowerCase();\r\n                return searchValue.indexOf(e.target.value) !==-1;\r\n            } else if(category === \"Recipient Name\"){\r\n                let searchValue = sinlgeItem.itemRecipientname.toLowerCase();\r\n                return searchValue.indexOf(e.target.value) !==-1;\r\n            }     \r\n            else if(category === \"Sender Name\"){\r\n                let searchValue = sinlgeItem.itemSendername.toLowerCase();\r\n                return searchValue.indexOf(e.target.value) !==-1;\r\n            }\r\n            else if(category === \"ByDaTe\"){\r\n                let searchValue = sinlgeItem.date_encoded.toLowerCase();\r\n                return searchValue.indexOf(e.target.value) !==-1;\r\n            }\r\n            return sinlgeItem;   \r\n        });\r\n        setFilterItems(newArray);\r\n    }\r\n\r\n    if(loading){\r\n        return <p>loading.....</p>\r\n    }\r\n    return (\r\n        <div className = \"container-fluid\">\r\n            <div className = \"row justify-content-md-center\">\r\n                <h2>All Items</h2>   \r\n            </div>  \r\n            <div className = \"ARtable\">\r\n                <div className = \"d-flex justify-content-center searchEntryItems\">\r\n                    <input  value = {searchInput} onChange = {onhandleChange} type = \"text\" placeholder =\"Seacrh for....\" className= \"searchOfAssignRiderItem\"></input>                                  \r\n                    <select value = {category}  onChange = {(e) => setCategory(e.target.value)}> \r\n                        <option value=\"\">Choose Category...</option>\r\n                        <option value = \"Item ID\">Item ID</option>\r\n                        <option value = \"Recipient Name\">Recipient Name</option>\r\n                        <option value = \"Sender Name\">Sender Name</option>\r\n                        <option value = \"ByDaTe\">Date</option>\r\n                    </select>\r\n                </div>  \r\n                <BootstrapTable\r\n                    striped \r\n                    keyField = \"item_id\"\r\n                    data = {!searchInput? item : filterItems}\r\n                    columns = {columns}\r\n                    pagination = {paginationFactory()}\r\n                    rowEvents = {rowEvents}\r\n                    selectRow = {selectRow}\r\n                />\r\n                {show ? <ModalContent/> : null}\r\n            </div> \r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        courierID: state.courier.courierId,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps) (AllItems)\r\n","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\DeliveredItems.js",["237","238"],"import React, {useState, useMemo, useEffect} from 'react'\r\n\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport paginationFactory  from 'react-bootstrap-table2-paginator';\r\nimport { Modal, Button } from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\nimport fire from '../config/fbConfig' \r\nimport moment from 'moment';\r\nimport { RiderItemsColumns } from './TableColumns';\r\n\r\nconst DeliveredItems = (props) => {\r\n    const {courierID, courBranch} = props\r\n    const [item , setItem] = useState([]);\r\n    const [loading , setLoading] = useState(false);\r\n    const [category, setCategory] = useState('Choose Category');\r\n    const [filterItems, setFilterItems] = useState([]);\r\n    const [searchInput, setSearchInput] = useState('');\r\n    const [modalInfo, setModalInfo] = useState([]);\r\n    const [showModal, setShowModal] = useState(false);\r\n\r\n    const [show, setShow] = useState(false);\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    const ref = fire.firestore().collection(\"Items\").where(\"courier_id\", \"==\", courierID).where(\"itemRecipientBranch\", \"==\", courBranch).where(\"status\", \"==\", \"delivered\");\r\n\r\n    function getDeliveredItems(){\r\n        setLoading(true);\r\n        ref.get().then((querySnapshot) => {\r\n            querySnapshot.forEach((doc) => {\r\n                var item_id =  doc.data().item_id;\r\n                var itemSendername= doc.data().itemSendername;\r\n                var itemSenderContactNumber= doc.data().itemSenderContactNumber;\r\n                var itemSenderAddressStreet= doc.data().itemSenderAddressStreet;\r\n                var itemSenderAddressBarangay= doc.data().itemSenderAddressBarangay;\r\n                var itemSenderAddressCity= doc.data().itemSenderAddressCity;\r\n                var itemSenderAddressProvince= doc.data().itemSenderAddressProvince;\r\n                var itemRecipientname= doc.data().itemRecipientname;\r\n                var itemRecipientContactNumber= doc.data().itemRecipientContactNumber;\r\n                var itemRecipientAddressStreet= doc.data().itemRecipientAddressStreet;\r\n                var itemRecipientAddressBarangay= doc.data().itemRecipientAddressBarangay;\r\n                var itemRecipientAddressCity= doc.data().itemRecipientAddressCity;\r\n                var itemRecipientAddressProvince= doc.data().itemRecipientAddressProvince; \r\n                var itemRecipientBranch= doc.data().itemRecipientBranch;\r\n                var itemSenderBranch= doc.data().itemSenderBranch;\r\n                var itemqty= doc.data().itemqty;\r\n                var itemweight= doc.data().itemweight;\r\n                var itemCOD= doc.data().itemCOD;\r\n                var courier_id= doc.data().courier_id; \r\n                var status= doc.data().status;\r\n                var encodedBy= doc.data().encodedBy;\r\n                var date_encoded= moment(doc.data().date_encoded.toDate()).format('LL').toString();    \r\n            \r\n                var docRef = fire.firestore().collection(\"Delivery_Header\").where(\"item_id\", \"==\", item_id);\r\n                docRef.get()\r\n                .then((querySnapshot) => {\r\n                    querySnapshot.forEach((doc) => {                      \r\n                        var docRef2 = fire.firestore().collection(\"Delivery_Detail\").where(\"del_item_id\", \"==\", doc.id);\r\n                        docRef2.get()\r\n                        .then((querySnapshot) => {\r\n                            var deldate = [];\r\n                            querySnapshot.forEach((doc) => {\r\n                                  deldate.push(moment(doc.data().date.toDate()).format('LLL').toString());\r\n                            }); \r\n                            var itemObj = {\r\n                                item_id : item_id,   \r\n                                itemSendername : itemSendername,\r\n                                itemSenderContactNumber: itemSenderContactNumber,\r\n                                itemSenderAddressStreet: itemSenderAddressStreet,\r\n                                itemSenderAddressBarangay: itemSenderAddressBarangay,\r\n                                itemSenderAddressCity: itemSenderAddressCity,\r\n                                itemSenderAddressProvince: itemSenderAddressProvince,\r\n                                itemRecipientname: itemRecipientname, \r\n                                itemRecipientContactNumber: itemRecipientContactNumber,\r\n                                itemRecipientAddressStreet: itemRecipientAddressStreet,\r\n                                itemRecipientAddressBarangay: itemRecipientAddressBarangay,\r\n                                itemRecipientAddressCity: itemRecipientAddressCity,\r\n                                itemRecipientAddressProvince: itemRecipientAddressProvince,\r\n                                itemRecipientBranch: itemRecipientBranch,\r\n                                itemSenderBranch: itemSenderBranch,\r\n                                itemqty: itemqty,\r\n                                itemweight: itemweight,\r\n                                itemCOD: itemCOD,\r\n                                courier_id: courier_id,\r\n                                status: status,\r\n                                encodedBy: encodedBy,\r\n                                date_encoded: date_encoded,\r\n                                assignedby: doc.data().assignedby, // check if no assigned rider it should be returned into NA\r\n                                rider_name: doc.data().rider_name,\r\n                                date_assigned: moment(doc.data().date_assigned.toDate()).format('LL').toString(),\r\n                                //del_date_sched: moment(doc.data().del_date_sched.toDate()).format('LL').toString(),\r\n                                del_date_sched: deldate[0],\r\n                            }\r\n                            setItem((item) => [...item, itemObj]) \r\n                        });                        \r\n       \r\n                    });\r\n                });\r\n            });\r\n            setLoading(false);\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        getDeliveredItems();\r\n    }, [])\r\n\r\n    const columns = useMemo(() => RiderItemsColumns, []);\r\n    const rowEvents = {\r\n        onDoubleClick: (e, row) => {\r\n           console.log(row);    \r\n           setModalInfo(row);\r\n           toggleTrueFalse();\r\n        }\r\n    }\r\n    const selectRow = {\r\n        mode: \"radio\",\r\n        clickToSelect: true,\r\n        bgColor: \"#00BFFF\",\r\n    };\r\n\r\n    const toggleTrueFalse = () => {\r\n        setShowModal(handleShow);\r\n    };\r\n\r\n    const ModalContent = () =>{\r\n        return (\r\n            <Modal show = {show} onHide ={handleClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>\r\n                        {modalInfo.item_id}\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <h5>Sender Information</h5>\r\n                    <ul>\r\n                        <ol>Name: {modalInfo.itemSendername}</ol>\r\n                        <ol>Contact Number: {modalInfo.itemSenderContactNumber}</ol>\r\n                        <ol>Address: {modalInfo.itemSenderAddressStreet},\r\n                             {modalInfo.itemSenderAddressBarangay}, \r\n                             {modalInfo.itemSenderAddressCity}, {modalInfo.itemSenderAddressProvince}\r\n                         </ol>\r\n                    </ul>\r\n                    <h5>Recipient Information</h5>\r\n                    <ul>\r\n                        <ol>Name: {modalInfo.itemRecipientname}</ol>\r\n                        <ol>Contact Number: {modalInfo.itemRecipientContactNumber}</ol>\r\n                        <ol>Address: {modalInfo.itemRecipientAddressStreet},\r\n                             {modalInfo.itemRecipientAddressBarangay}, \r\n                             {modalInfo.itemRecipientAddressCity}, {modalInfo.itemRecipientAddressProvince}\r\n                         </ol>\r\n                    </ul>\r\n                    <h5>Item Desc.</h5>\r\n                    <ul>\r\n                        <ol>QTY: {modalInfo.itemqty}</ol>\r\n                        <ol>Weight: {modalInfo.itemweight} KGS.</ol>\r\n                        <ol>COD: PHP {modalInfo.itemCOD}</ol>\r\n                        <ol>Encoded By: {modalInfo.encodedBy}</ol>\r\n                        <ol>Encoded Date: {modalInfo.date_encoded}</ol>\r\n                        <ol>Assigned By: {modalInfo.assignedby}</ol>\r\n                        <ol>Assigned Date: {modalInfo.date_assigned}</ol>\r\n                        <ol>Deliver Schedule: {modalInfo.del_date_sched}</ol>\r\n                        <ol>Assigned Dispatch Rider: {modalInfo.rider_name}</ol>\r\n                        <ol>Item Status: {modalInfo.status}</ol>\r\n                    </ul>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant = \"secondary\" onClick = {handleClose}>\r\n                        Close\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n       )\r\n    }\r\n\r\n    const onhandleChange = (e) => {\r\n        setSearchInput(e.target.value)\r\n        let newArray = item.filter((sinlgeItem) => {\r\n            if(category === \"Item ID\"){\r\n                let searchValue = sinlgeItem.item_id.toLowerCase();\r\n                return searchValue.indexOf(e.target.value) !==-1;\r\n            } else if(category === \"Recipient Name\"){\r\n                let searchValue = sinlgeItem.itemRecipientname.toLowerCase();\r\n                return searchValue.indexOf(e.target.value) !==-1;\r\n            }     \r\n            else if(category === \"Sender Name\"){\r\n                let searchValue = sinlgeItem.itemSendername.toLowerCase();\r\n                return searchValue.indexOf(e.target.value) !==-1;\r\n            }\r\n            else if(category === \"ByDaTe\"){\r\n                let searchValue = sinlgeItem.date_encoded.toLowerCase();\r\n                return searchValue.indexOf(e.target.value) !==-1;\r\n            }\r\n            return sinlgeItem;   \r\n        });\r\n        setFilterItems(newArray);\r\n    }\r\n\r\n    if(loading){\r\n        return <p>loading.....</p>\r\n    }\r\n\r\n    return (\r\n        <div className = \"container-fluid\">\r\n            <div className = \"row justify-content-md-center\">\r\n                <h2>Delivered Items</h2>   \r\n            </div>  \r\n            <div className = \"ARtable\">\r\n                <div className = \"d-flex justify-content-center searchEntryItems\">\r\n                    <input value = {searchInput} onChange = {onhandleChange}  type = \"text\" placeholder =\"Seacrh for....\" className= \"searchOfAssignRiderItem\"></input>                                  \r\n                    \r\n                    <select value = {category}  onChange = {(e) => setCategory(e.target.value)} > \r\n                        <option value=\"\">Choose Category...</option>\r\n                        <option value = \"Item ID\">Item ID</option>\r\n                        <option value = \"Recipient Name\">Recipient Name</option>\r\n                        <option value = \"Sender Name\">Sender Name</option>\r\n                        <option value = \"ByDaTe\">Date</option>\r\n                    </select>\r\n                </div>  \r\n                <BootstrapTable\r\n                    striped \r\n                    keyField = \"item_id\"\r\n                    data = {!searchInput? item : filterItems}\r\n                    columns = {columns}\r\n                    pagination = {paginationFactory()}\r\n                    rowEvents = {rowEvents}\r\n                    selectRow = {selectRow}\r\n                />\r\n                {show ? <ModalContent/> : null} \r\n            </div> \r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        courierID: state.courier.courierId,\r\n        courBranch: state.courier.courBranch,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps) (DeliveredItems)\r\n","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\ReturnedItems.js",["239","240"],"import React, {useState, useMemo, useEffect} from 'react'\r\n\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport paginationFactory  from 'react-bootstrap-table2-paginator';\r\nimport { Modal, Button } from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\nimport fire from '../config/fbConfig' \r\nimport moment from 'moment';\r\nimport { ReturnedItemsColumns } from './TableColumns';\r\n\r\nconst ReturnedItems = (props) => {\r\n    const {courierID, courBranch} = props\r\n    const [item , setItem] = useState([]);\r\n    const [loading , setLoading] = useState(false);\r\n    const [category, setCategory] = useState('Choose Category');\r\n    const [filterItems, setFilterItems] = useState([]);\r\n    const [searchInput, setSearchInput] = useState('');\r\n    const [modalInfo, setModalInfo] = useState([]);\r\n    const [showModal, setShowModal] = useState(false);\r\n\r\n    const [show, setShow] = useState(false);\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    const ref = fire.firestore().collection(\"Items\").where(\"courier_id\", \"==\", courierID).where(\"itemRecipientBranch\", \"==\", courBranch).where(\"status\", \"==\", \"returned\");\r\n\r\n    function getDeliveredItems(){\r\n        setLoading(true);\r\n        ref.get().then((querySnapshot) => {\r\n            querySnapshot.forEach((doc) => {\r\n                var item_id =  doc.data().item_id;\r\n                var itemSendername= doc.data().itemSendername;\r\n                var itemSenderContactNumber= doc.data().itemSenderContactNumber;\r\n                var itemSenderAddressStreet= doc.data().itemSenderAddressStreet;\r\n                var itemSenderAddressBarangay= doc.data().itemSenderAddressBarangay;\r\n                var itemSenderAddressCity= doc.data().itemSenderAddressCity;\r\n                var itemSenderAddressProvince= doc.data().itemSenderAddressProvince;\r\n                var itemRecipientname= doc.data().itemRecipientname;\r\n                var itemRecipientContactNumber= doc.data().itemRecipientContactNumber;\r\n                var itemRecipientAddressStreet= doc.data().itemRecipientAddressStreet;\r\n                var itemRecipientAddressBarangay= doc.data().itemRecipientAddressBarangay;\r\n                var itemRecipientAddressCity= doc.data().itemRecipientAddressCity;\r\n                var itemRecipientAddressProvince= doc.data().itemRecipientAddressProvince; \r\n                var itemRecipientBranch= doc.data().itemRecipientBranch;\r\n                var itemSenderBranch= doc.data().itemSenderBranch;\r\n                var itemqty= doc.data().itemqty;\r\n                var itemweight= doc.data().itemweight;\r\n                var itemCOD= doc.data().itemCOD;\r\n                var courier_id= doc.data().courier_id; \r\n                var status= doc.data().status;\r\n                var encodedBy= doc.data().encodedBy;\r\n                var date_encoded= moment(doc.data().date_encoded.toDate()).format('LL').toString();    \r\n            \r\n                var docRef = fire.firestore().collection(\"Delivery_Header\").where(\"item_id\", \"==\", item_id);\r\n                docRef.get()\r\n                .then((querySnapshot) => {\r\n                    querySnapshot.forEach((doc) => {                    \r\n                        var itemObj = {\r\n                            item_id : item_id,  \r\n                            itemSendername : itemSendername,\r\n                            itemSenderContactNumber: itemSenderContactNumber,\r\n                            itemSenderAddressStreet: itemSenderAddressStreet,\r\n                            itemSenderAddressBarangay: itemSenderAddressBarangay,\r\n                            itemSenderAddressCity: itemSenderAddressCity,\r\n                            itemSenderAddressProvince: itemSenderAddressProvince,\r\n                            itemRecipientname: itemRecipientname, \r\n                            itemRecipientContactNumber: itemRecipientContactNumber,\r\n                            itemRecipientAddressStreet: itemRecipientAddressStreet,\r\n                            itemRecipientAddressBarangay: itemRecipientAddressBarangay,\r\n                            itemRecipientAddressCity: itemRecipientAddressCity,\r\n                            itemRecipientAddressProvince: itemRecipientAddressProvince,\r\n                            itemRecipientBranch: itemRecipientBranch,\r\n                            itemSenderBranch: itemSenderBranch,\r\n                            itemqty: itemqty,\r\n                            itemweight: itemweight,\r\n                            itemCOD: itemCOD,\r\n                            courier_id: courier_id,\r\n                            status: status,\r\n                            encodedBy: encodedBy,\r\n                            date_encoded: date_encoded,\r\n                            assignedby: doc.data().assignedby, // check if no assigned rider it should be returned into NA\r\n                            rider_name: doc.data().rider_name,\r\n                            date_assigned: moment(doc.data().date_assigned.toDate()).format('LL').toString(),\r\n                            del_date_sched: moment(doc.data().del_date_sched.toDate()).format('LL').toString(),\r\n                        }                               \r\n                        setItem((item) => [...item, itemObj])    \r\n                    });\r\n                });\r\n            });\r\n            setLoading(false);\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        getDeliveredItems();\r\n    }, [])\r\n\r\n    const columns = useMemo(() => ReturnedItemsColumns, []);\r\n    const rowEvents = {\r\n        onDoubleClick: (e, row) => {\r\n           console.log(row);    \r\n           setModalInfo(row);\r\n           toggleTrueFalse();\r\n        }\r\n    }\r\n    const selectRow = {\r\n        mode: \"radio\",\r\n        clickToSelect: true,\r\n        bgColor: \"#00BFFF\",\r\n    };\r\n\r\n    const toggleTrueFalse = () => {\r\n        setShowModal(handleShow);\r\n    };\r\n\r\n    const ModalContent = () =>{\r\n        return (\r\n            <Modal show = {show} onHide ={handleClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>\r\n                        {modalInfo.item_id}\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <h5>Sender Information</h5>\r\n                    <ul>\r\n                        <ol>Name: {modalInfo.itemSendername}</ol>\r\n                        <ol>Contact Number: {modalInfo.itemSenderContactNumber}</ol>\r\n                        <ol>Address: {modalInfo.itemSenderAddressStreet},\r\n                             {modalInfo.itemSenderAddressBarangay}, \r\n                             {modalInfo.itemSenderAddressCity}, {modalInfo.itemSenderAddressProvince}\r\n                         </ol>\r\n                    </ul>\r\n                    <h5>Recipient Information</h5>\r\n                    <ul>\r\n                        <ol>Name: {modalInfo.itemRecipientname}</ol>\r\n                        <ol>Contact Number: {modalInfo.itemRecipientContactNumber}</ol>\r\n                        <ol>Address: {modalInfo.itemRecipientAddressStreet},\r\n                             {modalInfo.itemRecipientAddressBarangay}, \r\n                             {modalInfo.itemRecipientAddressCity}, {modalInfo.itemRecipientAddressProvince}\r\n                         </ol>\r\n                    </ul>\r\n                    <h5>Item Desc.</h5>\r\n                    <ul>\r\n                        <ol>QTY: {modalInfo.itemqty}</ol>\r\n                        <ol>Weight: {modalInfo.itemweight} KGS.</ol>\r\n                        <ol>COD: PHP {modalInfo.itemCOD}</ol>\r\n                        <ol>Encoded By: {modalInfo.encodedBy}</ol>\r\n                        <ol>Encoded Date: {modalInfo.date_encoded}</ol>\r\n                        <ol>Assigned By: {modalInfo.assignedby}</ol>\r\n                        <ol>Assigned Date: {modalInfo.date_assigned}</ol>\r\n                        <ol>Last Attempted Date Schedule: {modalInfo.del_date_sched}</ol>\r\n                        <ol>Assigned Dispatch Rider: {modalInfo.rider_name}</ol>\r\n                        <ol>Item Status: {modalInfo.status}</ol>\r\n                    </ul>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant = \"secondary\" onClick = {handleClose}>\r\n                        Close\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n       )\r\n    }\r\n\r\n    const onhandleChange = (e) => {\r\n        setSearchInput(e.target.value)\r\n        let newArray = item.filter((sinlgeItem) => {\r\n            if(category === \"Item ID\"){\r\n                let searchValue = sinlgeItem.item_id.toLowerCase();\r\n                return searchValue.indexOf(e.target.value) !==-1;\r\n            } else if(category === \"Recipient Name\"){\r\n                let searchValue = sinlgeItem.itemRecipientname.toLowerCase();\r\n                return searchValue.indexOf(e.target.value) !==-1;\r\n            }     \r\n            else if(category === \"Sender Name\"){\r\n                let searchValue = sinlgeItem.itemSendername.toLowerCase();\r\n                return searchValue.indexOf(e.target.value) !==-1;\r\n            }\r\n            else if(category === \"ByDaTe\"){\r\n                let searchValue = sinlgeItem.date_encoded.toLowerCase();\r\n                return searchValue.indexOf(e.target.value) !==-1;\r\n            }\r\n            return sinlgeItem;   \r\n        });\r\n        setFilterItems(newArray);\r\n    }\r\n\r\n    if(loading){\r\n        return <p>loading.....</p>\r\n    }\r\n\r\n    return (\r\n        <div className = \"container-fluid\">\r\n            <div className = \"row justify-content-md-center\">\r\n                <h2>Returned Items</h2>   \r\n            </div>  \r\n            <div className = \"ARtable\">\r\n                <div className = \"d-flex justify-content-center searchEntryItems\">\r\n                    <input value = {searchInput} onChange = {onhandleChange}  type = \"text\" placeholder =\"Seacrh for....\" className= \"searchOfAssignRiderItem\"></input>                                  \r\n                                      \r\n                    <select value = {category}  onChange = {(e) => setCategory(e.target.value)}> \r\n                        <option value=\"\">Choose Category...</option>\r\n                        <option value = \"Item ID\">Item ID</option>\r\n                        <option value = \"Recipient Name\">Recipient Name</option>\r\n                        <option value = \"Sender Name\">Sender Name</option>\r\n                        <option value = \"ByDaTe\">Date</option>\r\n                    </select>\r\n                </div>  \r\n                <BootstrapTable\r\n                    striped \r\n                    keyField = \"item_id\"\r\n                    data = {!searchInput? item : filterItems}\r\n                    columns = {columns}\r\n                    pagination = {paginationFactory()}\r\n                    rowEvents = {rowEvents}\r\n                    selectRow = {selectRow}\r\n                />\r\n                {show ? <ModalContent/> : null} \r\n            </div> \r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        courierID: state.courier.courierId,\r\n        courBranch: state.courier.courBranch,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(ReturnedItems)\r\n","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\OfficeEmpInfo.js",[],"C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\DispatchRiderInfo.js",["241"],"import React, { useState }from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { useHistory } from 'react-router'\r\nimport {calculate_age} from './CustomsStyles'\r\nimport moment from 'moment'\r\nimport { Modal, Button } from 'react-bootstrap';\r\nimport RiderPerformance from './RiderPerformance'\r\nimport RiderDeliveryHistory from './RiderDeliveryHistory'\r\n\r\n\r\nfunction DispatchRiderInfo(props) {\r\n    const {ridersEmp}  = props;\r\n    const history = useHistory();\r\n\r\n    const [modalInfo, setModalInfo] = useState();\r\n    const [showModal, setShowModal] = useState(false);\r\n    const [show, setShow] = useState(false);\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    var birthdateString = moment(ridersEmp.birthdate).format('LL').toString();\r\n\r\n    const toggleTrueFalse = () => {\r\n        setShowModal(handleShow);\r\n    };\r\n\r\n    const ModalContent = () =>{\r\n        return (\r\n            <Modal show = {show} onHide ={handleClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>\r\n                        {modalInfo.title}\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body className = \"d-flex justify-content-center searchEntryItems\">\r\n                    <img width =\"300\" height =\"300\" src= {modalInfo.pic} alt = {modalInfo.title}/>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant = \"secondary\" onClick = {handleClose}>\r\n                        Close\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n       )\r\n    }\r\n\r\n    return (\r\n        <div className =  \"container empCntr\">\r\n            <div className = \"row justify-content-md-center OEI-header\">         \r\n                <h2>Dispatch Rider Information</h2>   \r\n            </div>\r\n            <div className = \"row justify-content-md-center OEI-header\">\r\n                    <div className = \"col\">\r\n                        <div className = \"row\">\r\n                            <div className = \"col-md\">\r\n                                <h6>Email: {ridersEmp.email}</h6>\r\n                            </div>\r\n                            <div className=\"w-100\"></div>\r\n                            <div className = \"col-md\">\r\n                                <h6>First Name: {ridersEmp.fname}</h6>\r\n                            </div>\r\n                            <div className=\"w-100\"></div>\r\n                            <div className = \"col-md\">\r\n                                <h6>Middle Name: {ridersEmp.mname}</h6>\r\n                            </div>\r\n                            <div className=\"w-100\"></div>\r\n                            <div className = \"col-md\">\r\n                                <h6>Last Name: {ridersEmp.lname}</h6>\r\n                            </div>\r\n                            <div className=\"w-100\"></div>\r\n                            <div className = \"col-md\">\r\n                                <h6>Age: {calculate_age(ridersEmp.birthdate)}</h6>\r\n                            </div>\r\n                            <div className=\"w-100\"></div>\r\n                            <div className = \"col-md\">\r\n                               <h6>Address: {ridersEmp.address}</h6>\r\n                            </div>\r\n                            <div className=\"w-100\"></div>\r\n                            <div className = \"col-md\">\r\n                                <h6>Contact Number: {ridersEmp.contactNumber}</h6>\r\n                            </div>\r\n                            <div className=\"w-100\"></div>\r\n                            <div className = \"col-md\">\r\n                                <h6>Emergency Contact Number: {ridersEmp.emerg_number}</h6>\r\n                            </div>\r\n                        </div>\r\n                    </div>  \r\n                    <div className=\"col\">\r\n                        <div className = \"row\">\r\n                            <div className = \"col-md\">\r\n                                <h6>Birth Date: {birthdateString}</h6>\r\n                            </div>\r\n                            <div className=\"w-100\"></div>\r\n                            <div className = \"col-md\">\r\n                                <h6>Gender: {ridersEmp.gender}</h6>\r\n                            </div>\r\n                            <div className=\"w-100\"></div>\r\n                            <div className = \"col-md\">\r\n                                <h6>Barangay Designated: Brgy. {ridersEmp.designateBarangay}</h6>\r\n                            </div>\r\n                            <div className=\"w-100\"></div>\r\n                            <div className = \"col-md\">\r\n                                <h6>Vehicle Type: {ridersEmp.vehicle_type}</h6>\r\n                            </div>\r\n                            <div className=\"w-100\"></div>\r\n                            <div className = \"col-md\">\r\n                                <h6>Status: {ridersEmp.status}</h6>\r\n                            </div>\r\n                            <div className=\"w-100\"></div>\r\n                            <div className = \"col-md\">\r\n                                <h6>Branch: {ridersEmp.branch}</h6>\r\n                            </div>\r\n                            <div className=\"w-100\"></div>\r\n                            <div className = \"col-md\">\r\n                                <h6>Encoded By: {ridersEmp.encodedBY}</h6>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <hr/>\r\n            <div className=\"row\">\r\n                <h2 >Credentials</h2> \r\n            </div>\r\n            <div className=\"row\">\r\n                 <div className = \"col\">\r\n                    <button className = \"btn btn-primary\"\r\n                        onClick = {() =>{setModalInfo({\r\n                                title: 'Actual Assessment',\r\n                                pic: ridersEmp.actualAssessment\r\n                            });\r\n                            toggleTrueFalse();\r\n                        }}\r\n                    >\r\n                        Actual Assessment</button>\r\n                 </div>\r\n                 <div className = \"col\">\r\n                    <button className = \"btn btn-primary\"\r\n                        onClick = {() =>{setModalInfo({\r\n                                title: 'Written Exam Result',\r\n                                pic: ridersEmp.writtenExam\r\n                            });\r\n                            toggleTrueFalse();\r\n                         }}\r\n                    >\r\n                        Written Exam Result</button>\r\n                 </div>\r\n                 <div className = \"col\">\r\n                    <button className = \"btn btn-primary\"\r\n                        onClick = {() =>{setModalInfo({\r\n                                title: 'Vehicle Official Receipt',\r\n                                pic: ridersEmp.oR\r\n                            });\r\n                            toggleTrueFalse();\r\n                        }}\r\n                    >\r\n                        Vehicle Official Receipt</button>\r\n                 </div>\r\n                 <div className = \"col\">\r\n                    <button className = \"btn btn-primary\"\r\n                        onClick = {() =>{setModalInfo({\r\n                                title: 'Certificate Registration',\r\n                                pic: ridersEmp.cR\r\n                            });\r\n                            toggleTrueFalse();\r\n                         }}\r\n                    >\r\n                        Certificate Registration</button>\r\n                 </div>\r\n                 <div className = \"col\">\r\n                    <button className = \"btn btn-primary\"\r\n                        onClick = {() =>{setModalInfo({\r\n                                title: 'License',\r\n                                pic: ridersEmp.license\r\n                            });\r\n                            toggleTrueFalse();\r\n                        }}\r\n                    >\r\n                        License</button>\r\n                 </div>\r\n            </div>\r\n            {show ? <ModalContent/> : null}\r\n            <hr/>\r\n            <div className=\"row btn-cntr\">\r\n                <h5 className = \"editstyle\" onClick = {() => {history.push('/UpdateRiderInfo')}} >Edit</h5> \r\n            </div>\r\n            <hr/>\r\n            <div className=\"row\">\r\n                <h2 >Performance</h2> \r\n               \r\n            </div>\r\n            <RiderPerformance riderID = {ridersEmp.id}/>\r\n            <hr/>\r\n            <div className=\"row\">\r\n                <h2 >Delivery History</h2>\r\n            </div>\r\n            <RiderDeliveryHistory riderID = {ridersEmp.id}/>\r\n            <hr/>\r\n            <div className=\"row btn-cntr\">\r\n                <div className = \"col col-sm-4\">\r\n                    <button className = \"btn-primary\" onClick = {() => {history.push('/dispatchRiders')}}>&lt;&lt;Back</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    console.log(state)\r\n    return{\r\n        ridersEmp: state.dispatchRider.selectedRidersEmp\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps) (DispatchRiderInfo)\r\n","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\UpdateRiderInfo.js",[],"C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\RiderDeliveryHistory.js",["242","243","244"],"import React, { useMemo ,useEffect, useState } from 'react'\r\nimport fire from '../config/fbConfig' \r\nimport { RiderItemsColumns } from './TableColumns';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport paginationFactory  from 'react-bootstrap-table2-paginator';\r\nimport { Modal, Button } from 'react-bootstrap';\r\nimport moment from 'moment';\r\n\r\nconst RiderDeliveryHistory = (props) => {\r\n    const {riderID} = props;\r\n    const [item , setItem] = useState([]);\r\n    const [loading , setLoading] = useState(false);\r\n    const [category, setCategory] = useState('');\r\n    const [filterItems, setFilterItems] = useState([]);\r\n    const [searchInput, setSearchInput] = useState('');\r\n\r\n    const ref = fire.firestore().collection(\"Delivery_Header\").where(\"rider_id\", \"==\", riderID);\r\n\r\n    function getRiderItem(){\r\n        setLoading(true);\r\n        setItem([]);\r\n        ref.get()\r\n        .then((querySnapshot) => {\r\n            querySnapshot.forEach((doc) => {\r\n                var item_id = doc.data().item_id;   \r\n                var del_date_sched = moment(doc.data().del_date_sched.toDate()).format('LL').toString();\r\n                var docRef = fire.firestore().collection(\"Items\").where(\"item_id\", \"==\", item_id).where(\"status\", \"==\", \"delivered\");\r\n                docRef.get()\r\n                .then((querySnapshot) => {\r\n                    querySnapshot.forEach((doc) => {\r\n                        var itemObj = {\r\n                            item_id: doc.data().item_id,\r\n                            itemSendername: doc.data().itemSendername,\r\n                            itemSenderContactNumber: doc.data().itemSenderContactNumber,\r\n                            itemSenderAddressStreet: doc.data().itemSenderAddressStreet,\r\n                            itemSenderAddressBarangay: doc.data().itemSenderAddressBarangay,\r\n                            itemSenderAddressCity: doc.data().itemSenderAddressCity,\r\n                            itemSenderAddressProvince: doc.data().itemSenderAddressProvince,\r\n                            itemRecipientname: doc.data().itemRecipientname,\r\n                            itemRecipientContactNumber: doc.data().itemRecipientContactNumber,\r\n                            itemRecipientAddressStreet: doc.data().itemRecipientAddressStreet,\r\n                            itemRecipientAddressBarangay: doc.data().itemRecipientAddressBarangay,\r\n                            itemRecipientAddressCity: doc.data().itemRecipientAddressCity,\r\n                            itemRecipientAddressProvince: doc.data().itemRecipientAddressProvince, \r\n                            itemRecipientBranch: doc.data().itemRecipientBranch,\r\n                            itemSenderBranch: doc.data().itemSenderBranch,\r\n                            itemqty: doc.data().itemqty,\r\n                            itemweight: doc.data().itemweight,\r\n                            itemCOD: doc.data().itemCOD,\r\n                            courier_id: doc.data().courier_id, \r\n                            status: doc.data().status,\r\n                            encodedBy: doc.data().encodedBy,\r\n                            date_encoded: moment(doc.data().date_encoded.toDate()).format('LL').toString(),\r\n                            del_date_sched : del_date_sched \r\n                        }\r\n                        setItem((item) => [...item, itemObj])                            \r\n                    });\r\n                }); \r\n            });\r\n            setLoading(false);\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        getRiderItem();\r\n    }, [])\r\n\r\n    const columns = useMemo(() => RiderItemsColumns, []);\r\n    const rowEvents = {\r\n        onDoubleClick: (e, row) => {\r\n           console.log(row);    \r\n        //    setModalInfo(row);\r\n        //    toggleTrueFalse();\r\n        }\r\n    }\r\n    const selectRow = {\r\n        mode: \"radio\",\r\n        clickToSelect: true,\r\n        bgColor: \"#00BFFF\",\r\n      };\r\n\r\n    const onhandleChange = (e) => {\r\n        setSearchInput(e.target.value)\r\n        let newArray = item.filter((sinlgeItem) => {\r\n            if(category === \"Item ID\"){\r\n                let searchValue = sinlgeItem.item_id.toLowerCase();\r\n                return searchValue.indexOf(e.target.value) !==-1;\r\n            } else if(category === \"Recipient Name\"){\r\n                let searchValue = sinlgeItem.itemRecipientname.toLowerCase();\r\n                return searchValue.indexOf(e.target.value) !==-1;\r\n            }     \r\n            else if(category === \"Sender Name\"){\r\n                let searchValue = sinlgeItem.itemSendername.toLowerCase();\r\n                return searchValue.indexOf(e.target.value) !==-1;\r\n            }\r\n            else if(category === \"ByDaTe\"){\r\n                let searchValue = sinlgeItem.del_date_sched.toLowerCase();\r\n                return searchValue.indexOf(e.target.value) !==-1;\r\n            }\r\n            return sinlgeItem;   \r\n        });\r\n        setFilterItems(newArray);\r\n    }\r\n\r\n\r\n    if(loading){\r\n        return <p>loading.....</p>\r\n    }\r\n    console.log(item)\r\n    return (\r\n        <div className = \"container\">\r\n            <div className = \"ARtable\">\r\n                <div className = \"d-flex justify-content-center searchEntryItems\">\r\n                    <input value = {searchInput} onChange = {onhandleChange} type = \"text\" placeholder =\"Seacrh for....\" className= \"searchOfAssignRiderItem\"></input>\r\n                    \r\n                    <select value = {category}  onChange = {(e) => setCategory(e.target.value)}> \r\n                    \r\n                        <option value=\"\" disabled selected hidden>Choose Category...</option>\r\n                        <option value = \"Item ID\">Item ID</option>\r\n                        <option value = \"Recipient Name\">Recipient Name</option>\r\n                        <option value = \"Sender Name\">Sender Name</option>\r\n                        <option value = \"ByDaTe\">Date</option>\r\n                    </select>\r\n                </div>  \r\n                <BootstrapTable\r\n                    striped \r\n                    keyField = \"item_id\"\r\n                    data = {!searchInput? item : filterItems}\r\n                    columns = {columns}\r\n                    pagination = {paginationFactory()}\r\n                    rowEvents = {rowEvents}\r\n                    selectRow = {selectRow}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RiderDeliveryHistory\r\n","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\RiderPerformance.js",["245"],"C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\CourierName.js",["246"],"import React, { useEffect, useState } from 'react'\r\nimport firebase from '../config/fbConfig'\r\nimport RingLoader from \"react-spinners/RingLoader\";\r\n\r\nconst CourierName =  (props) => {\r\n    const {courierID} = props;\r\n    const [courName, setCourName] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    var docRef = firebase.firestore().collection(\"Couriers_Company\").doc(courierID);\r\n\r\n    function getCourName(){\r\n        setLoading(true);\r\n        docRef.get().then((doc) => {\r\n            if (doc.exists) {\r\n                setCourName(doc.data().Courier_Name);  \r\n            }\r\n            setLoading(false);\r\n        });\r\n    }\r\n    useEffect(() => {\r\n        getCourName();\r\n    }, [])\r\n\r\n    if(loading){\r\n        return <RingLoader size = {30} color = {'#1D927A'} loading = {loading}/>\r\n    }\r\n\r\n    return (\r\n        <div className = \"d-flex justify-content-center headerCourName\">\r\n            <h2>{courName}</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CourierName\r\n","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\TotalUnassignedItemBranch.js",["247"],"import React, { useState, useEffect} from 'react'\r\nimport fire from '../config/fbConfig' \r\n\r\nconst TotalUnassignedItemBranch = (props) => {\r\n    const { courierID, courBranch} = props;\r\n    const [totalUnassignedItem, setTotalUnassignedItem] = useState('');\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    const ref = fire.firestore().collection(\"Items\").where(\"courier_id\", \"==\", courierID)\r\n        .where(\"itemRecipientBranch\", \"==\", courBranch)\r\n        .where(\"status\", \"==\", \"unassigned\");\r\n\r\n    function getTotalUnassignedItem(){\r\n        setLoading(true);\r\n        ref.get()\r\n        .then((querySnapshot) => {\r\n            var count = 0;\r\n            querySnapshot.forEach((doc) => {\r\n                count++;\r\n            });\r\n            setTotalUnassignedItem(count.toString());\r\n            setLoading(false);\r\n        })\r\n    }\r\n    \r\n    useEffect(() => {\r\n        getTotalUnassignedItem();\r\n     \r\n    }, []);\r\n\r\n    if(loading){\r\n        return <p>Loading...</p>\r\n    }\r\n    return (\r\n        <div className =\"card cardcolor\">\r\n            <div className=\"card-body\">\r\n                <h3 className=\"card-title\">Total Unassigned Items </h3>  \r\n                <h2 className=\"card-title\">{totalUnassignedItem} Items </h2>  \r\n                <p className=\"card-text\"> Items that need Assign Dispatch Rider inorder to deliver into the recipient</p>                            \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TotalUnassignedItemBranch\r\n","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\TotalBranchItem.js",["248"],"import React, { useEffect, useState } from 'react'\r\nimport fire from '../config/fbConfig' \r\nimport RingLoader from \"react-spinners/RingLoader\";\r\n\r\nconst TotalBranchItem = (props) => {\r\n    const { courierID, courBranch} = props;\r\n    const [totalBranchItem, setTotalBranchItem] = useState('');\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    const ref = fire.firestore().collection(\"Items\").where(\"courier_id\", \"==\", courierID)\r\n        .where(\"itemSenderBranch\", \"==\", courBranch);\r\n\r\n    function getBranchItem(){\r\n        setLoading(true);\r\n        ref.get()\r\n        .then((querySnapshot) => {\r\n            var count = 0;\r\n            querySnapshot.forEach((doc) => {\r\n                count++;\r\n            });\r\n            setTotalBranchItem(count.toString());\r\n            setLoading(false);\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        getBranchItem()\r\n    }, [])\r\n\r\n    if(loading){\r\n        return <RingLoader size = {30} color = {'#1D927A'} loading = {loading}/>\r\n    }\r\n\r\n    return (\r\n        <div className =\"card cardcolor\">\r\n            <div className=\"card-body\">\r\n                <h3 className=\"card-title\">Branch Items</h3>\r\n                <h2 className=\"card-title\">{totalBranchItem} Items</h2>\r\n                <p className=\"card-text\">Items that the warehouse branch encoded to the system</p>                       \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TotalBranchItem\r\n","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\TotalBranchDispatchRider.js",["249"],"import React, {useState, useEffect} from 'react'\r\nimport fire from '../config/fbConfig' \r\n\r\nconst TotalBranchDispatchRider = (props) => {\r\n    const { courierID, courBranch} = props;\r\n    const [totalBranchDispatchRider, setTotalBranchDispatchRider] = useState('');\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    const ref = fire.firestore().collection(\"Dispatch Riders\").where(\"courier_id\", \"==\", courierID)\r\n        .where(\"branch\", \"==\", courBranch);\r\n\r\n    function getBranchItem(){\r\n        setLoading(true);\r\n        ref.get()\r\n        .then((querySnapshot) => {\r\n            var count = 0;\r\n            querySnapshot.forEach((doc) => {\r\n                count++;\r\n            });\r\n            setTotalBranchDispatchRider(count.toString());\r\n            setLoading(false);\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        getBranchItem()\r\n    }, [])\r\n\r\n    if(loading){\r\n        return <p>Loading...</p>\r\n    }\r\n    return (\r\n        <div className =\"card cardcolor\">\r\n            <div className=\"card-body\">\r\n                <h3 className=\"card-title\">Total Dispatch Riders</h3>\r\n                <h2 className=\"card-title\">{totalBranchDispatchRider} Dispatch Riders</h2>\r\n                <p className=\"card-text\">Total of Dispatch Riders that employed in this branch</p>                       \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TotalBranchDispatchRider\r\n","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\TotalBranchOfficeEmployees.js",["250"],"import React, {useState, useEffect} from 'react'\r\nimport fire from '../config/fbConfig' \r\n\r\nconst TotalBranchOfficeEmployees = (props) => {\r\n    const { courierID, courBranch} = props;\r\n    const [totalBranchOfficeEmployees, setTotalBranchOfficeEmployees] = useState('');\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    const ref = fire.firestore().collection(\"Office_Employees\").where(\"courier_id\", \"==\", courierID)\r\n        .where(\"branch\", \"==\", courBranch);\r\n\r\n    function getBranchItem(){\r\n        setLoading(true);\r\n        ref.get()\r\n        .then((querySnapshot) => {\r\n            var count = 0;\r\n            querySnapshot.forEach((doc) => {\r\n                count++;\r\n            });\r\n            setTotalBranchOfficeEmployees(count.toString());\r\n            setLoading(false);\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        getBranchItem()\r\n    }, [])\r\n\r\n    if(loading){\r\n        return <p>Loading...</p>\r\n    }\r\n    return (\r\n        <div className =\"card cardcolor\">\r\n            <div className=\"card-body\">\r\n                <h3 className=\"card-title\">Total Office Employees</h3>\r\n                <h2 className=\"card-title\">{totalBranchOfficeEmployees} Office Employees</h2>\r\n                <p className=\"card-text\">Total of Office Employees that employed in this branch</p>                       \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TotalBranchOfficeEmployees\r\n","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\SplashScreen.js",["251"],"import React, { useState, useEffect} from 'react'\r\nimport { connect } from 'react-redux';\r\nimport {useHistory} from 'react-router'\r\nimport RingLoader from \"react-spinners/RingLoader\";\r\nimport { compose } from 'redux';\r\nimport {getCourierID} from '../store/actions/courierAction';\r\nimport {firestoreConnect} from 'react-redux-firebase'\r\n\r\nconst SplashScreen = (props) => {\r\n    const { auth } = props;\r\n    const history = useHistory();\r\n    const [loading, setLoading] = useState(true);\r\n    \r\n    useEffect(() => {\r\n        props.getCourierID(auth)\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n       setLoading(true)\r\n       setTimeout(() => {\r\n            setLoading(false)\r\n       }, 4000)\r\n      \r\n    },[]);\r\n\r\n    return (\r\n        <div className = \"splash_container\">\r\n            {loading ? (\r\n                <RingLoader size = {100} color = {'#1D927A'} loading = {loading}/>\r\n            ) : history.push('/home') }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) =>{\r\n    //console.log(state)\r\n    return{\r\n        auth: state.firebase.auth.uid,\r\n        courierID: state.courier.courierId,\r\n        courBranch: state.courier.courBranch,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>{\r\n    return{    \r\n       getCourierID: (authUid) => dispatch(getCourierID(authUid))\r\n    }\r\n}\r\n\r\nexport default compose(connect(mapStateToProps, mapDispatchToProps),\r\nfirestoreConnect((props) => [\r\n    {\r\n        collection: 'Office_Employees',\r\n        where: [\r\n            ['courier_id', '==', props.courierID],\r\n            ['branch', '==', props.courBranch]\r\n        ]\r\n    },\r\n    {\r\n        collection: 'Branch',\r\n        where: [\r\n            ['Courier_id', '==', props.courierID],\r\n            ['status', '==', 'active']\r\n        ]\r\n    },\r\n    {\r\n        collection: 'Items',\r\n        where: [\r\n            ['courier_id', '==', props.courierID],\r\n            ['itemRecipientBranch', '==', props.courBranch]\r\n        ]\r\n    },\r\n])\r\n\r\n)(SplashScreen)\r\n","C:\\Users\\leo\\Desktop\\Capstone Project\\web-street-efficient\\src\\components\\AttemptContainer.js",["252","253","254"],"import React, {useState, useMemo, useEffect} from 'react'\r\n\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport paginationFactory  from 'react-bootstrap-table2-paginator';\r\nimport { Modal, Button, Container, Row, Col } from 'react-bootstrap';\r\nimport DatePicker from 'react-datepicker'\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\nimport { connect } from 'react-redux';\r\nimport fire from '../config/fbConfig' \r\nimport moment from 'moment';\r\nimport RingLoader from \"react-spinners/RingLoader\";\r\nimport { DeliveryAttempColumns } from './TableColumns';\r\nimport { updateReturnItem, updateReschedItem } from '../store/actions/itemAction';\r\n\r\nconst AttemptContainer = (props) => {\r\n    const {courierID, courBranch} = props\r\n    const [item , setItem] = useState([]);\r\n    const [loading , setLoading] = useState(false);\r\n    const [modalInfo, setModalInfo] = useState([]);\r\n    const [showModal, setShowModal] = useState(false);\r\n    const[itemDel, setItemDel] = useState({\r\n        del_date_sched: null,\r\n        item_id: null,\r\n    });\r\n    const [resched, setResched] = useState(false);\r\n    const [returnItemID , setReturnItemID] = useState();\r\n\r\n    const [show, setShow] = useState(false);\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    const ref = fire.firestore().collection(\"Items\").where(\"courier_id\", \"==\", courierID).where(\"itemRecipientBranch\", \"==\", courBranch).where(\"status\", \"==\", \"assigned\");\r\n    function getItemAttempt(){\r\n        setLoading(true);\r\n        ref.get().then((querySnapshot) => {\r\n            querySnapshot.forEach((doc) => {\r\n                var item_id =  doc.data().item_id;\r\n                const docref = fire.firestore().collection(\"Delivery_Attempt\").where(\"id\", \"==\", item_id).where(\"status\", \"==\", \"back_to_warehouse\")\r\n                docref.get().then((querySnapshot) => {\r\n                    querySnapshot.forEach((doc) => {\r\n                        var itemObject = doc.data();\r\n                        setItem((item) => [...item, itemObject])  \r\n                    });\r\n                });\r\n            });\r\n            setLoading(false);\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        getItemAttempt();\r\n    }, [])\r\n\r\n    const columns = useMemo(() => DeliveryAttempColumns, []);\r\n    const rowEvents = {\r\n        onDoubleClick: (e, row) => {\r\n           console.log(row);    \r\n           setReturnItemID(row.id)\r\n           setItemDel({...itemDel, item_id: row.id});\r\n           setModalInfo(row);\r\n           toggleTrueFalse();\r\n        }\r\n    }\r\n    const selectRow = {\r\n        mode: \"radio\",\r\n        clickToSelect: true,\r\n        bgColor: \"#00BFFF\",\r\n    };\r\n    const toggleTrueFalse = () => {\r\n        setShowModal(handleShow);\r\n    };\r\n\r\n    const handleSubmitReturnedItems = (e) =>{\r\n        e.preventDefault();\r\n        props.updateReturnItem(returnItemID);\r\n\r\n        for( var i = 0; i < item.length; i++){ \r\n    \r\n            if ( item[i].id === returnItemID) { \r\n        \r\n                item.splice(i, 1); \r\n            }\r\n        \r\n        }\r\n        handleClose();\r\n\r\n    }\r\n\r\n    const handleSubmitReschedItems = (e) =>{\r\n        e.preventDefault();\r\n        if(itemDel.del_date_sched != null){\r\n            for( var i = 0; i < item.length; i++){ \r\n    \r\n                if ( item[i].id === itemDel.item_id) { \r\n            \r\n                    item.splice(i, 1); \r\n                }\r\n            }\r\n            handleClose();\r\n            setResched(!resched);\r\n            props.updateReschedItem(itemDel);\r\n            setItemDel({\r\n                del_date_sched: null,\r\n                item_id: null,\r\n            });\r\n        }\r\n    }\r\n\r\n    const handleCancel = (e) => {\r\n        e.preventDefault();\r\n        setResched(!resched);\r\n        setItemDel({\r\n            del_date_sched: null,\r\n            item_id: null,\r\n        });\r\n    }\r\n\r\n\r\n    const ModalContent = () =>{\r\n        return (\r\n            <Modal show = {show} onHide ={handleClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>\r\n                       Item ID: {modalInfo.id}\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Container>\r\n                        <h5>What would you Like?</h5>\r\n                        <Row>\r\n                            <Col>\r\n                                <Button variant = \"primary \" onClick = {() => setResched(!resched)}>\r\n                                    Reschedule\r\n                                </Button>\r\n                            </Col>\r\n                            <Col>\r\n                                <Button variant = \"primary \" onClick = {handleSubmitReturnedItems}> \r\n                                    Return To Sender\r\n                                </Button>\r\n                            </Col>\r\n                        </Row>    \r\n                        {resched ?               \r\n                        (<Row className=\"mt-3\">\r\n                            <Col xs={12}>\r\n                                <h6>Choose New Delivery Date Schedule</h6>\r\n                            </Col>\r\n                            <Col xs={12}>\r\n                                <DatePicker \r\n                                    selected = {itemDel.del_date_sched}\r\n                                    onChange = {e =>  setItemDel({...itemDel, del_date_sched: e})}\r\n                                    dateFormat = 'MM/dd/yyyy'\r\n                                    placeholderText = \"Delivery Date Schedule\"\r\n                                    isClearable\r\n                                    minDate = {new Date()}\r\n                                />  \r\n                            </Col>          \r\n                            <Col xs={12} className=\"mt-2\">\r\n                                <Button variant = \"primary \" onClick = {handleSubmitReschedItems}>\r\n                                    Submit\r\n                                </Button>\r\n                                <Button variant = \"secondary \"  className=\"ml-5\" onClick = {handleCancel} >\r\n                                    Cancel\r\n                                </Button>\r\n                            </Col>\r\n                        </Row>) : null}                         \r\n                    </Container>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant = \"secondary\" onClick = {handleClose}>\r\n                        Close\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n       )\r\n    }\r\n\r\n\r\n    if(loading){\r\n        return <RingLoader size = {30} color = {'#1D927A'} loading = {loading}/>\r\n    }\r\n    return (\r\n        <div className = \"row\">\r\n            <div className = \"col-sm\">\r\n                <h3>Delivery Attempt</h3>\r\n            </div>\r\n            <div className=\"w-100\"></div>\r\n            <div className = \"col-sm ARtable\">\r\n                <BootstrapTable\r\n                    striped \r\n                    keyField = \"id\"\r\n                    data = {item}\r\n                    columns = {columns}\r\n                    pagination = {paginationFactory()}\r\n                    rowEvents = {rowEvents}\r\n                    selectRow = {selectRow}\r\n                />  \r\n                {show ? <ModalContent/> : null}\r\n            </div>           \r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        courierID: state.courier.courierId,\r\n        courBranch: state.courier.courBranch,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>{\r\n    return {\r\n        updateReturnItem: (returnItemID) => dispatch(updateReturnItem(returnItemID)),\r\n        updateReschedItem: (itemDel) => dispatch(updateReschedItem(itemDel)),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AttemptContainer)\r\n",{"ruleId":"255","replacedBy":"256"},{"ruleId":"257","replacedBy":"258"},{"ruleId":"259","severity":1,"message":"260","line":36,"column":8,"nodeType":"261","endLine":36,"endColumn":10,"suggestions":"262"},{"ruleId":"259","severity":1,"message":"263","line":56,"column":8,"nodeType":"261","endLine":56,"endColumn":10,"suggestions":"264"},{"ruleId":"259","severity":1,"message":"265","line":74,"column":8,"nodeType":"261","endLine":74,"endColumn":10,"suggestions":"266"},{"ruleId":"259","severity":1,"message":"267","line":47,"column":8,"nodeType":"261","endLine":47,"endColumn":10,"suggestions":"268"},{"ruleId":"269","severity":1,"message":"270","line":15,"column":46,"nodeType":"271","messageId":"272","endLine":15,"endColumn":65},{"ruleId":"259","severity":1,"message":"273","line":66,"column":8,"nodeType":"261","endLine":66,"endColumn":10,"suggestions":"274"},{"ruleId":"275","severity":1,"message":"276","line":64,"column":61,"nodeType":"277","messageId":"278","endLine":64,"endColumn":63},{"ruleId":"259","severity":1,"message":"279","line":102,"column":7,"nodeType":"261","endLine":102,"endColumn":31,"suggestions":"280"},{"ruleId":"269","severity":1,"message":"281","line":19,"column":12,"nodeType":"271","messageId":"272","endLine":19,"endColumn":21},{"ruleId":"259","severity":1,"message":"273","line":66,"column":8,"nodeType":"261","endLine":66,"endColumn":10,"suggestions":"282"},{"ruleId":"269","severity":1,"message":"281","line":19,"column":12,"nodeType":"271","messageId":"272","endLine":19,"endColumn":21},{"ruleId":"259","severity":1,"message":"283","line":132,"column":8,"nodeType":"261","endLine":132,"endColumn":10,"suggestions":"284"},{"ruleId":"269","severity":1,"message":"281","line":19,"column":12,"nodeType":"271","messageId":"272","endLine":19,"endColumn":21},{"ruleId":"259","severity":1,"message":"285","line":106,"column":8,"nodeType":"261","endLine":106,"endColumn":10,"suggestions":"286"},{"ruleId":"269","severity":1,"message":"281","line":19,"column":12,"nodeType":"271","messageId":"272","endLine":19,"endColumn":21},{"ruleId":"259","severity":1,"message":"285","line":96,"column":8,"nodeType":"261","endLine":96,"endColumn":10,"suggestions":"287"},{"ruleId":"269","severity":1,"message":"281","line":16,"column":12,"nodeType":"271","messageId":"272","endLine":16,"endColumn":21},{"ruleId":"269","severity":1,"message":"288","line":6,"column":10,"nodeType":"271","messageId":"272","endLine":6,"endColumn":15},{"ruleId":"269","severity":1,"message":"289","line":6,"column":17,"nodeType":"271","messageId":"272","endLine":6,"endColumn":23},{"ruleId":"259","severity":1,"message":"290","line":66,"column":8,"nodeType":"261","endLine":66,"endColumn":10,"suggestions":"291"},{"ruleId":"259","severity":1,"message":"292","line":50,"column":8,"nodeType":"261","endLine":50,"endColumn":10,"suggestions":"293"},{"ruleId":"259","severity":1,"message":"294","line":23,"column":8,"nodeType":"261","endLine":23,"endColumn":10,"suggestions":"295"},{"ruleId":"259","severity":1,"message":"296","line":29,"column":8,"nodeType":"261","endLine":29,"endColumn":10,"suggestions":"297"},{"ruleId":"259","severity":1,"message":"298","line":28,"column":8,"nodeType":"261","endLine":28,"endColumn":10,"suggestions":"299"},{"ruleId":"259","severity":1,"message":"298","line":27,"column":8,"nodeType":"261","endLine":27,"endColumn":10,"suggestions":"300"},{"ruleId":"259","severity":1,"message":"298","line":27,"column":8,"nodeType":"261","endLine":27,"endColumn":10,"suggestions":"301"},{"ruleId":"259","severity":1,"message":"302","line":16,"column":8,"nodeType":"261","endLine":16,"endColumn":10,"suggestions":"303"},{"ruleId":"269","severity":1,"message":"304","line":10,"column":8,"nodeType":"271","messageId":"272","endLine":10,"endColumn":14},{"ruleId":"269","severity":1,"message":"281","line":20,"column":12,"nodeType":"271","messageId":"272","endLine":20,"endColumn":21},{"ruleId":"259","severity":1,"message":"305","line":52,"column":8,"nodeType":"261","endLine":52,"endColumn":10,"suggestions":"306"},"no-native-reassign",["307"],"no-negated-in-lhs",["308"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getRiderLocation'. Either include it or remove the dependency array.","ArrayExpression",["309"],"React Hook useEffect has a missing dependency: 'getOfficeEmp'. Either include it or remove the dependency array.",["310"],"React Hook useEffect has a missing dependency: 'getRiderEmp'. Either include it or remove the dependency array.",["311"],"React Hook useEffect has a missing dependency: 'getUserProfile'. Either include it or remove the dependency array.",["312"],"no-unused-vars","'addOffice_Emp_Error' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'getItem'. Either include it or remove the dependency array.",["313"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'firstFilterBrgy'. Either include it or remove the dependency array.",["314"],"'showModal' is assigned a value but never used.",["315"],"React Hook useEffect has a missing dependency: 'getAllItems'. Either include it or remove the dependency array.",["316"],"React Hook useEffect has a missing dependency: 'getDeliveredItems'. Either include it or remove the dependency array.",["317"],["318"],"'Modal' is defined but never used.","'Button' is defined but never used.","React Hook useEffect has a missing dependency: 'getRiderItem'. Either include it or remove the dependency array.",["319"],"React Hook useEffect has a missing dependency: 'getPerformannce'. Either include it or remove the dependency array.",["320"],"React Hook useEffect has a missing dependency: 'getCourName'. Either include it or remove the dependency array.",["321"],"React Hook useEffect has a missing dependency: 'getTotalUnassignedItem'. Either include it or remove the dependency array.",["322"],"React Hook useEffect has a missing dependency: 'getBranchItem'. Either include it or remove the dependency array.",["323"],["324"],["325"],"React Hook useEffect has missing dependencies: 'auth' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["326"],"'moment' is defined but never used.","React Hook useEffect has a missing dependency: 'getItemAttempt'. Either include it or remove the dependency array.",["327"],"no-global-assign","no-unsafe-negation",{"desc":"328","fix":"329"},{"desc":"330","fix":"331"},{"desc":"332","fix":"333"},{"desc":"334","fix":"335"},{"desc":"336","fix":"337"},{"desc":"338","fix":"339"},{"desc":"336","fix":"340"},{"desc":"341","fix":"342"},{"desc":"343","fix":"344"},{"desc":"343","fix":"345"},{"desc":"346","fix":"347"},{"desc":"348","fix":"349"},{"desc":"350","fix":"351"},{"desc":"352","fix":"353"},{"desc":"354","fix":"355"},{"desc":"354","fix":"356"},{"desc":"354","fix":"357"},{"desc":"358","fix":"359"},{"desc":"360","fix":"361"},"Update the dependencies array to be: [getRiderLocation]",{"range":"362","text":"363"},"Update the dependencies array to be: [getOfficeEmp]",{"range":"364","text":"365"},"Update the dependencies array to be: [getRiderEmp]",{"range":"366","text":"367"},"Update the dependencies array to be: [getUserProfile]",{"range":"368","text":"369"},"Update the dependencies array to be: [getItem]",{"range":"370","text":"371"},"Update the dependencies array to be: [firstFilterBrgy, itemDel.del_date_sched]",{"range":"372","text":"373"},{"range":"374","text":"371"},"Update the dependencies array to be: [getAllItems]",{"range":"375","text":"376"},"Update the dependencies array to be: [getDeliveredItems]",{"range":"377","text":"378"},{"range":"379","text":"378"},"Update the dependencies array to be: [getRiderItem]",{"range":"380","text":"381"},"Update the dependencies array to be: [getPerformannce]",{"range":"382","text":"383"},"Update the dependencies array to be: [getCourName]",{"range":"384","text":"385"},"Update the dependencies array to be: [getTotalUnassignedItem]",{"range":"386","text":"387"},"Update the dependencies array to be: [getBranchItem]",{"range":"388","text":"389"},{"range":"390","text":"389"},{"range":"391","text":"389"},"Update the dependencies array to be: [auth, props]",{"range":"392","text":"393"},"Update the dependencies array to be: [getItemAttempt]",{"range":"394","text":"395"},[1203,1205],"[getRiderLocation]",[2162,2164],"[getOfficeEmp]",[3162,3164],"[getRiderEmp]",[1774,1776],"[getUserProfile]",[3342,3344],"[getItem]",[3709,3733],"[firstFilterBrgy, itemDel.del_date_sched]",[3325,3327],[7662,7664],"[getAllItems]",[6144,6146],"[getDeliveredItems]",[5471,5473],[3573,3575],"[getRiderItem]",[2017,2019],"[getPerformannce]",[713,715],"[getCourName]",[932,934],"[getTotalUnassignedItem]",[885,887],"[getBranchItem]",[866,868],[875,877],[558,560],"[auth, props]",[2240,2242],"[getItemAttempt]"]